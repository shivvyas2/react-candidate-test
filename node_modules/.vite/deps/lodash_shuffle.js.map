{
  "version": 3,
  "sources": ["../../lodash/_copyArray.js", "../../lodash/_baseRandom.js", "../../lodash/_shuffleSelf.js", "../../lodash/_arrayShuffle.js", "../../lodash/_arrayMap.js", "../../lodash/_baseValues.js", "../../lodash/values.js", "../../lodash/_baseShuffle.js", "../../lodash/shuffle.js"],
  "sourcesContent": ["/**\r\n * Copies the values of `source` to `array`.\r\n *\r\n * @private\r\n * @param {Array} source The array to copy values from.\r\n * @param {Array} [array=[]] The array to copy values to.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction copyArray(source, array) {\r\n  var index = -1,\r\n      length = source.length;\r\n\r\n  array || (array = Array(length));\r\n  while (++index < length) {\r\n    array[index] = source[index];\r\n  }\r\n  return array;\r\n}\r\n\r\nmodule.exports = copyArray;\r\n", "/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeFloor = Math.floor,\r\n    nativeRandom = Math.random;\r\n\r\n/**\r\n * The base implementation of `_.random` without support for returning\r\n * floating-point numbers.\r\n *\r\n * @private\r\n * @param {number} lower The lower bound.\r\n * @param {number} upper The upper bound.\r\n * @returns {number} Returns the random number.\r\n */\r\nfunction baseRandom(lower, upper) {\r\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\r\n}\r\n\r\nmodule.exports = baseRandom;\r\n", "var baseRandom = require('./_baseRandom');\r\n\r\n/**\r\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to shuffle.\r\n * @param {number} [size=array.length] The size of `array`.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction shuffleSelf(array, size) {\r\n  var index = -1,\r\n      length = array.length,\r\n      lastIndex = length - 1;\r\n\r\n  size = size === undefined ? length : size;\r\n  while (++index < size) {\r\n    var rand = baseRandom(index, lastIndex),\r\n        value = array[rand];\r\n\r\n    array[rand] = array[index];\r\n    array[index] = value;\r\n  }\r\n  array.length = size;\r\n  return array;\r\n}\r\n\r\nmodule.exports = shuffleSelf;\r\n", "var copyArray = require('./_copyArray'),\r\n    shuffleSelf = require('./_shuffleSelf');\r\n\r\n/**\r\n * A specialized version of `_.shuffle` for arrays.\r\n *\r\n * @private\r\n * @param {Array} array The array to shuffle.\r\n * @returns {Array} Returns the new shuffled array.\r\n */\r\nfunction arrayShuffle(array) {\r\n  return shuffleSelf(copyArray(array));\r\n}\r\n\r\nmodule.exports = arrayShuffle;\r\n", "/**\r\n * A specialized version of `_.map` for arrays without support for iteratee\r\n * shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the new mapped array.\r\n */\r\nfunction arrayMap(array, iteratee) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length,\r\n      result = Array(length);\r\n\r\n  while (++index < length) {\r\n    result[index] = iteratee(array[index], index, array);\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = arrayMap;\r\n", "var arrayMap = require('./_arrayMap');\r\n\r\n/**\r\n * The base implementation of `_.values` and `_.valuesIn` which creates an\r\n * array of `object` property values corresponding to the property names\r\n * of `props`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Array} props The property names to get values for.\r\n * @returns {Object} Returns the array of property values.\r\n */\r\nfunction baseValues(object, props) {\r\n  return arrayMap(props, function(key) {\r\n    return object[key];\r\n  });\r\n}\r\n\r\nmodule.exports = baseValues;\r\n", "var baseValues = require('./_baseValues'),\r\n    keys = require('./keys');\r\n\r\n/**\r\n * Creates an array of the own enumerable string keyed property values of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property values.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.values(new Foo);\r\n * // => [1, 2] (iteration order is not guaranteed)\r\n *\r\n * _.values('hi');\r\n * // => ['h', 'i']\r\n */\r\nfunction values(object) {\r\n  return object == null ? [] : baseValues(object, keys(object));\r\n}\r\n\r\nmodule.exports = values;\r\n", "var shuffleSelf = require('./_shuffleSelf'),\r\n    values = require('./values');\r\n\r\n/**\r\n * The base implementation of `_.shuffle`.\r\n *\r\n * @private\r\n * @param {Array|Object} collection The collection to shuffle.\r\n * @returns {Array} Returns the new shuffled array.\r\n */\r\nfunction baseShuffle(collection) {\r\n  return shuffleSelf(values(collection));\r\n}\r\n\r\nmodule.exports = baseShuffle;\r\n", "var arrayShuffle = require('./_arrayShuffle'),\r\n    baseShuffle = require('./_baseShuffle'),\r\n    isArray = require('./isArray');\r\n\r\n/**\r\n * Creates an array of shuffled values, using a version of the\r\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Collection\r\n * @param {Array|Object} collection The collection to shuffle.\r\n * @returns {Array} Returns the new shuffled array.\r\n * @example\r\n *\r\n * _.shuffle([1, 2, 3, 4]);\r\n * // => [4, 1, 3, 2]\r\n */\r\nfunction shuffle(collection) {\r\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\r\n  return func(collection);\r\n}\r\n\r\nmodule.exports = shuffle;\r\n"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAQA,aAAS,UAAU,QAAQ,OAAO;AAChC,UAAI,QAAQ,IACR,SAAS,OAAO;AAEpB,gBAAU,QAAQ,MAAM,MAAM;AAC9B,aAAO,EAAE,QAAQ,QAAQ;AACvB,cAAM,KAAK,IAAI,OAAO,KAAK;AAAA,MAC7B;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACnBjB;AAAA;AACA,QAAI,cAAc,KAAK;AAAvB,QACI,eAAe,KAAK;AAWxB,aAAS,WAAW,OAAO,OAAO;AAChC,aAAO,QAAQ,YAAY,aAAa,KAAK,QAAQ,QAAQ,EAAE;AAAA,IACjE;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACjBjB;AAAA;AAAA,QAAI,aAAa;AAUjB,aAAS,YAAY,OAAO,MAAM;AAChC,UAAI,QAAQ,IACR,SAAS,MAAM,QACf,YAAY,SAAS;AAEzB,aAAO,SAAS,SAAY,SAAS;AACrC,aAAO,EAAE,QAAQ,MAAM;AACrB,YAAI,OAAO,WAAW,OAAO,SAAS,GAClC,QAAQ,MAAM,IAAI;AAEtB,cAAM,IAAI,IAAI,MAAM,KAAK;AACzB,cAAM,KAAK,IAAI;AAAA,MACjB;AACA,YAAM,SAAS;AACf,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;AC3BjB;AAAA;AAAA,QAAI,YAAY;AAAhB,QACI,cAAc;AASlB,aAAS,aAAa,OAAO;AAC3B,aAAO,YAAY,UAAU,KAAK,CAAC;AAAA,IACrC;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACdjB;AAAA;AASA,aAAS,SAAS,OAAO,UAAU;AACjC,UAAI,QAAQ,IACR,SAAS,SAAS,OAAO,IAAI,MAAM,QACnC,SAAS,MAAM,MAAM;AAEzB,aAAO,EAAE,QAAQ,QAAQ;AACvB,eAAO,KAAK,IAAI,SAAS,MAAM,KAAK,GAAG,OAAO,KAAK;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACpBjB;AAAA;AAAA,QAAI,WAAW;AAYf,aAAS,WAAW,QAAQ,OAAO;AACjC,aAAO,SAAS,OAAO,SAAS,KAAK;AACnC,eAAO,OAAO,GAAG;AAAA,MACnB,CAAC;AAAA,IACH;AAEA,WAAO,UAAU;AAAA;AAAA;;;AClBjB;AAAA;AAAA,QAAI,aAAa;AAAjB,QACI,OAAO;AA4BX,aAAS,OAAO,QAAQ;AACtB,aAAO,UAAU,OAAO,CAAC,IAAI,WAAW,QAAQ,KAAK,MAAM,CAAC;AAAA,IAC9D;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACjCjB;AAAA;AAAA,QAAI,cAAc;AAAlB,QACI,SAAS;AASb,aAAS,YAAY,YAAY;AAC/B,aAAO,YAAY,OAAO,UAAU,CAAC;AAAA,IACvC;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACdjB;AAAA;AAAA,QAAI,eAAe;AAAnB,QACI,cAAc;AADlB,QAEI,UAAU;AAiBd,aAAS,QAAQ,YAAY;AAC3B,UAAI,OAAO,QAAQ,UAAU,IAAI,eAAe;AAChD,aAAO,KAAK,UAAU;AAAA,IACxB;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
