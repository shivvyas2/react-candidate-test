{
  "version": 3,
  "sources": ["../../date-fns/add.js", "../../date-fns/isSaturday.js", "../../date-fns/isSunday.js", "../../date-fns/isWeekend.js", "../../date-fns/addBusinessDays.js", "../../date-fns/setISOWeekYear.js", "../../date-fns/addISOWeekYears.js", "../../date-fns/addQuarters.js", "../../date-fns/areIntervalsOverlapping.js", "../../date-fns/max.js", "../../date-fns/min.js", "../../date-fns/clamp.js", "../../date-fns/closestIndexTo.js", "../../date-fns/closestTo.js", "../../date-fns/compareAsc.js", "../../date-fns/compareDesc.js", "../../date-fns/constructNow.js", "../../date-fns/daysToWeeks.js", "../../date-fns/differenceInBusinessDays.js", "../../date-fns/differenceInCalendarISOWeekYears.js", "../../date-fns/differenceInCalendarISOWeeks.js", "../../date-fns/differenceInCalendarMonths.js", "../../date-fns/getQuarter.js", "../../date-fns/differenceInCalendarQuarters.js", "../../date-fns/differenceInCalendarWeeks.js", "../../date-fns/differenceInCalendarYears.js", "../../date-fns/differenceInDays.js", "../../date-fns/_lib/getRoundingMethod.js", "../../date-fns/differenceInHours.js", "../../date-fns/subISOWeekYears.js", "../../date-fns/differenceInISOWeekYears.js", "../../date-fns/differenceInMilliseconds.js", "../../date-fns/differenceInMinutes.js", "../../date-fns/isLastDayOfMonth.js", "../../date-fns/differenceInMonths.js", "../../date-fns/differenceInQuarters.js", "../../date-fns/differenceInSeconds.js", "../../date-fns/differenceInWeeks.js", "../../date-fns/differenceInYears.js", "../../date-fns/_lib/normalizeInterval.js", "../../date-fns/eachDayOfInterval.js", "../../date-fns/eachHourOfInterval.js", "../../date-fns/eachMinuteOfInterval.js", "../../date-fns/eachMonthOfInterval.js", "../../date-fns/startOfQuarter.js", "../../date-fns/eachQuarterOfInterval.js", "../../date-fns/eachWeekOfInterval.js", "../../date-fns/eachWeekendOfInterval.js", "../../date-fns/eachWeekendOfMonth.js", "../../date-fns/eachWeekendOfYear.js", "../../date-fns/eachYearOfInterval.js", "../../date-fns/endOfDecade.js", "../../date-fns/endOfHour.js", "../../date-fns/endOfISOWeek.js", "../../date-fns/endOfISOWeekYear.js", "../../date-fns/endOfMinute.js", "../../date-fns/endOfQuarter.js", "../../date-fns/endOfSecond.js", "../../date-fns/endOfToday.js", "../../date-fns/endOfTomorrow.js", "../../date-fns/endOfYesterday.js", "../../date-fns/formatDistance.js", "../../date-fns/formatDistanceStrict.js", "../../date-fns/formatDistanceToNow.js", "../../date-fns/formatDistanceToNowStrict.js", "../../date-fns/formatDuration.js", "../../date-fns/formatISO.js", "../../date-fns/formatISO9075.js", "../../date-fns/formatISODuration.js", "../../date-fns/formatRFC3339.js", "../../date-fns/formatRFC7231.js", "../../date-fns/formatRelative.js", "../../date-fns/fromUnixTime.js", "../../date-fns/getDay.js", "../../date-fns/isLeapYear.js", "../../date-fns/getDaysInYear.js", "../../date-fns/getDecade.js", "../../date-fns/getISOWeeksInYear.js", "../../date-fns/getOverlappingDaysInIntervals.js", "../../date-fns/getTime.js", "../../date-fns/getUnixTime.js", "../../date-fns/getWeekOfMonth.js", "../../date-fns/lastDayOfMonth.js", "../../date-fns/getWeeksInMonth.js", "../../date-fns/hoursToMilliseconds.js", "../../date-fns/hoursToMinutes.js", "../../date-fns/hoursToSeconds.js", "../../date-fns/interval.js", "../../date-fns/intervalToDuration.js", "../../date-fns/intlFormat.js", "../../date-fns/intlFormatDistance.js", "../../date-fns/isExists.js", "../../date-fns/isFirstDayOfMonth.js", "../../date-fns/isFriday.js", "../../date-fns/isFuture.js", "../../date-fns/isMatch.js", "../../date-fns/isMonday.js", "../../date-fns/isPast.js", "../../date-fns/isSameWeek.js", "../../date-fns/isSameISOWeek.js", "../../date-fns/isSameISOWeekYear.js", "../../date-fns/startOfMinute.js", "../../date-fns/isSameMinute.js", "../../date-fns/isSameQuarter.js", "../../date-fns/startOfSecond.js", "../../date-fns/isSameSecond.js", "../../date-fns/isThisHour.js", "../../date-fns/isThisISOWeek.js", "../../date-fns/isThisMinute.js", "../../date-fns/isThisMonth.js", "../../date-fns/isThisQuarter.js", "../../date-fns/isThisSecond.js", "../../date-fns/isThisWeek.js", "../../date-fns/isThisYear.js", "../../date-fns/isThursday.js", "../../date-fns/isToday.js", "../../date-fns/isTomorrow.js", "../../date-fns/isTuesday.js", "../../date-fns/isWednesday.js", "../../date-fns/subDays.js", "../../date-fns/isYesterday.js", "../../date-fns/lastDayOfDecade.js", "../../date-fns/lastDayOfWeek.js", "../../date-fns/lastDayOfISOWeek.js", "../../date-fns/lastDayOfISOWeekYear.js", "../../date-fns/lastDayOfQuarter.js", "../../date-fns/lastDayOfYear.js", "../../date-fns/lightFormat.js", "../../date-fns/milliseconds.js", "../../date-fns/millisecondsToHours.js", "../../date-fns/millisecondsToMinutes.js", "../../date-fns/millisecondsToSeconds.js", "../../date-fns/minutesToHours.js", "../../date-fns/minutesToMilliseconds.js", "../../date-fns/minutesToSeconds.js", "../../date-fns/monthsToQuarters.js", "../../date-fns/monthsToYears.js", "../../date-fns/nextDay.js", "../../date-fns/nextFriday.js", "../../date-fns/nextMonday.js", "../../date-fns/nextSaturday.js", "../../date-fns/nextSunday.js", "../../date-fns/nextThursday.js", "../../date-fns/nextTuesday.js", "../../date-fns/nextWednesday.js", "../../date-fns/parseISO.js", "../../date-fns/parseJSON.js", "../../date-fns/previousDay.js", "../../date-fns/previousFriday.js", "../../date-fns/previousMonday.js", "../../date-fns/previousSaturday.js", "../../date-fns/previousSunday.js", "../../date-fns/previousThursday.js", "../../date-fns/previousTuesday.js", "../../date-fns/previousWednesday.js", "../../date-fns/quartersToMonths.js", "../../date-fns/quartersToYears.js", "../../date-fns/roundToNearestHours.js", "../../date-fns/roundToNearestMinutes.js", "../../date-fns/secondsToHours.js", "../../date-fns/secondsToMilliseconds.js", "../../date-fns/secondsToMinutes.js", "../../date-fns/set.js", "../../date-fns/setDayOfYear.js", "../../date-fns/setDefaultOptions.js", "../../date-fns/setQuarter.js", "../../date-fns/setWeekYear.js", "../../date-fns/startOfDecade.js", "../../date-fns/startOfToday.js", "../../date-fns/startOfTomorrow.js", "../../date-fns/startOfYesterday.js", "../../date-fns/subMonths.js", "../../date-fns/sub.js", "../../date-fns/subBusinessDays.js", "../../date-fns/subHours.js", "../../date-fns/subMilliseconds.js", "../../date-fns/subMinutes.js", "../../date-fns/subQuarters.js", "../../date-fns/subSeconds.js", "../../date-fns/subWeeks.js", "../../date-fns/subYears.js", "../../date-fns/weeksToDays.js", "../../date-fns/yearsToDays.js", "../../date-fns/yearsToMonths.js", "../../date-fns/yearsToQuarters.js"],
  "sourcesContent": ["import { addDays } from \"./addDays.js\";\r\nimport { addMonths } from \"./addMonths.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link add} function options.\r\n */\r\n\r\n/**\r\n * @name add\r\n * @category Common Helpers\r\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\r\n *\r\n * @description\r\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the seconds added\r\n *\r\n * @example\r\n * // Add the following duration to 1 September 2014, 10:19:50\r\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\r\n *   years: 2,\r\n *   months: 9,\r\n *   weeks: 1,\r\n *   days: 7,\r\n *   hours: 5,\r\n *   minutes: 9,\r\n *   seconds: 30,\r\n * })\r\n * //=> Thu Jun 15 2017 15:29:20\r\n */\r\nexport function add(date, duration, options) {\r\n  const {\r\n    years = 0,\r\n    months = 0,\r\n    weeks = 0,\r\n    days = 0,\r\n    hours = 0,\r\n    minutes = 0,\r\n    seconds = 0,\r\n  } = duration;\r\n\r\n  // Add years and months\r\n  const _date = toDate(date, options?.in);\r\n  const dateWithMonths =\r\n    months || years ? addMonths(_date, months + years * 12) : _date;\r\n\r\n  // Add weeks and days\r\n  const dateWithDays =\r\n    days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\r\n\r\n  // Add days, hours, minutes, and seconds\r\n  const minutesToAdd = minutes + hours * 60;\r\n  const secondsToAdd = seconds + minutesToAdd * 60;\r\n  const msToAdd = secondsToAdd * 1000;\r\n\r\n  return constructFrom(options?.in || date, +dateWithDays + msToAdd);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default add;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isSaturday} function options.\r\n */\r\n\r\n/**\r\n * @name isSaturday\r\n * @category Weekday Helpers\r\n * @summary Is the given date Saturday?\r\n *\r\n * @description\r\n * Is the given date Saturday?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is Saturday\r\n *\r\n * @example\r\n * // Is 27 September 2014 Saturday?\r\n * const result = isSaturday(new Date(2014, 8, 27))\r\n * //=> true\r\n */\r\nexport function isSaturday(date, options) {\r\n  return toDate(date, options?.in).getDay() === 6;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSaturday;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isSunday} function options.\r\n */\r\n\r\n/**\r\n * @name isSunday\r\n * @category Weekday Helpers\r\n * @summary Is the given date Sunday?\r\n *\r\n * @description\r\n * Is the given date Sunday?\r\n *\r\n * @param date - The date to check\r\n * @param options - The options object\r\n *\r\n * @returns The date is Sunday\r\n *\r\n * @example\r\n * // Is 21 September 2014 Sunday?\r\n * const result = isSunday(new Date(2014, 8, 21))\r\n * //=> true\r\n */\r\nexport function isSunday(date, options) {\r\n  return toDate(date, options?.in).getDay() === 0;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSunday;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isWeekend} function options.\r\n */\r\n\r\n/**\r\n * @name isWeekend\r\n * @category Weekday Helpers\r\n * @summary Does the given date fall on a weekend?\r\n *\r\n * @description\r\n * Does the given date fall on a weekend? A weekend is either Saturday (`6`) or Sunday (`0`).\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date falls on a weekend\r\n *\r\n * @example\r\n * // Does 5 October 2014 fall on a weekend?\r\n * const result = isWeekend(new Date(2014, 9, 5))\r\n * //=> true\r\n */\r\nexport function isWeekend(date, options) {\r\n  const day = toDate(date, options?.in).getDay();\r\n  return day === 0 || day === 6;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isWeekend;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { isSaturday } from \"./isSaturday.js\";\r\nimport { isSunday } from \"./isSunday.js\";\r\nimport { isWeekend } from \"./isWeekend.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link addBusinessDays} function options.\r\n */\r\n\r\n/**\r\n * @name addBusinessDays\r\n * @category Day Helpers\r\n * @summary Add the specified number of business days (mon - fri) to the given date.\r\n *\r\n * @description\r\n * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the business days added\r\n *\r\n * @example\r\n * // Add 10 business days to 1 September 2014:\r\n * const result = addBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)\r\n */\r\nexport function addBusinessDays(date, amount, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const startedOnWeekend = isWeekend(_date, options);\r\n\r\n  if (isNaN(amount)) return constructFrom(options?.in, NaN);\r\n\r\n  const hours = _date.getHours();\r\n  const sign = amount < 0 ? -1 : 1;\r\n  const fullWeeks = Math.trunc(amount / 5);\r\n\r\n  _date.setDate(_date.getDate() + fullWeeks * 7);\r\n\r\n  // Get remaining days not part of a full week\r\n  let restDays = Math.abs(amount % 5);\r\n\r\n  // Loops over remaining days\r\n  while (restDays > 0) {\r\n    _date.setDate(_date.getDate() + sign);\r\n    if (!isWeekend(_date, options)) restDays -= 1;\r\n  }\r\n\r\n  // If the date is a weekend day and we reduce a dividable of\r\n  // 5 from it, we land on a weekend date.\r\n  // To counter this, we add days accordingly to land on the next business day\r\n  if (startedOnWeekend && isWeekend(_date, options) && amount !== 0) {\r\n    // If we're reducing days, we want to add days until we land on a weekday\r\n    // If we're adding days we want to reduce days until we land on a weekday\r\n    if (isSaturday(_date, options))\r\n      _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));\r\n    if (isSunday(_date, options))\r\n      _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));\r\n  }\r\n\r\n  // Restore hours to avoid DST lag\r\n  _date.setHours(hours);\r\n\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default addBusinessDays;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\r\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setISOWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name setISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Set the ISO week-numbering year to the given date.\r\n *\r\n * @description\r\n * Set the ISO week-numbering year to the given date,\r\n * saving the week number and the weekday number.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param weekYear - The ISO week-numbering year of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the ISO week-numbering year set\r\n *\r\n * @example\r\n * // Set ISO week-numbering year 2007 to 29 December 2008:\r\n * const result = setISOWeekYear(new Date(2008, 11, 29), 2007)\r\n * //=> Mon Jan 01 2007 00:00:00\r\n */\r\nexport function setISOWeekYear(date, weekYear, options) {\r\n  let _date = toDate(date, options?.in);\r\n  const diff = differenceInCalendarDays(\r\n    _date,\r\n    startOfISOWeekYear(_date, options),\r\n  );\r\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\r\n  fourthOfJanuary.setFullYear(weekYear, 0, 4);\r\n  fourthOfJanuary.setHours(0, 0, 0, 0);\r\n  _date = startOfISOWeekYear(fourthOfJanuary);\r\n  _date.setDate(_date.getDate() + diff);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setISOWeekYear;\r\n", "import { getISOWeekYear } from \"./getISOWeekYear.js\";\r\nimport { setISOWeekYear } from \"./setISOWeekYear.js\";\r\n\r\n/**\r\n * The {@link addISOWeekYears} function options.\r\n */\r\n\r\n/**\r\n * @name addISOWeekYears\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Add the specified number of ISO week-numbering years to the given date.\r\n *\r\n * @description\r\n * Add the specified number of ISO week-numbering years to the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of ISO week-numbering years to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the ISO week-numbering years added\r\n *\r\n * @example\r\n * // Add 5 ISO week-numbering years to 2 July 2010:\r\n * const result = addISOWeekYears(new Date(2010, 6, 2), 5)\r\n * //=> Fri Jun 26 2015 00:00:00\r\n */\r\nexport function addISOWeekYears(date, amount, options) {\r\n  return setISOWeekYear(date, getISOWeekYear(date, options) + amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default addISOWeekYears;\r\n", "import { addMonths } from \"./addMonths.js\";\r\n\r\n/**\r\n * The {@link addQuarters} function options.\r\n */\r\n\r\n/**\r\n * @name addQuarters\r\n * @category Quarter Helpers\r\n * @summary Add the specified number of year quarters to the given date.\r\n *\r\n * @description\r\n * Add the specified number of year quarters to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of quarters to be added.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the quarters added\r\n *\r\n * @example\r\n * // Add 1 quarter to 1 September 2014:\r\n * const result = addQuarters(new Date(2014, 8, 1), 1)\r\n * //=; Mon Dec 01 2014 00:00:00\r\n */\r\nexport function addQuarters(date, amount, options) {\r\n  return addMonths(date, amount * 3, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default addQuarters;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link areIntervalsOverlapping} function options.\r\n */\r\n\r\n/**\r\n * @name areIntervalsOverlapping\r\n * @category Interval Helpers\r\n * @summary Is the given time interval overlapping with another time interval?\r\n *\r\n * @description\r\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - The object with options\r\n *\r\n * @returns Whether the time intervals are overlapping\r\n *\r\n * @example\r\n * // For overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // For non-overlapping time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // For adjacent time intervals:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Using the inclusive option:\r\n * areIntervalsOverlapping(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\r\n *   { inclusive: true }\r\n * )\r\n * //=> true\r\n */\r\nexport function areIntervalsOverlapping(intervalLeft, intervalRight, options) {\r\n  const [leftStartTime, leftEndTime] = [\r\n    +toDate(intervalLeft.start, options?.in),\r\n    +toDate(intervalLeft.end, options?.in),\r\n  ].sort((a, b) => a - b);\r\n  const [rightStartTime, rightEndTime] = [\r\n    +toDate(intervalRight.start, options?.in),\r\n    +toDate(intervalRight.end, options?.in),\r\n  ].sort((a, b) => a - b);\r\n\r\n  if (options?.inclusive)\r\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\r\n\r\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default areIntervalsOverlapping;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link max} function options.\r\n */\r\n\r\n/**\r\n * @name max\r\n * @category Common Helpers\r\n * @summary Return the latest of the given dates.\r\n *\r\n * @description\r\n * Return the latest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The latest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the latest?\r\n * const result = max([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Sun Jul 02 1995 00:00:00\r\n */\r\nexport function max(dates, options) {\r\n  let result;\r\n  let context = options?.in;\r\n\r\n  dates.forEach((date) => {\r\n    // Use the first date object as the context function\r\n    if (!context && typeof date === \"object\")\r\n      context = constructFrom.bind(null, date);\r\n\r\n    const date_ = toDate(date, context);\r\n    if (!result || result < date_ || isNaN(+date_)) result = date_;\r\n  });\r\n\r\n  return constructFrom(context, result || NaN);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default max;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link min} function options.\r\n */\r\n\r\n/**\r\n * @name min\r\n * @category Common Helpers\r\n * @summary Returns the earliest of the given dates.\r\n *\r\n * @description\r\n * Returns the earliest of the given dates.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param dates - The dates to compare\r\n *\r\n * @returns The earliest of the dates\r\n *\r\n * @example\r\n * // Which of these dates is the earliest?\r\n * const result = min([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Wed Feb 11 1987 00:00:00\r\n */\r\nexport function min(dates, options) {\r\n  let result;\r\n  let context = options?.in;\r\n\r\n  dates.forEach((date) => {\r\n    // Use the first date object as the context function\r\n    if (!context && typeof date === \"object\")\r\n      context = constructFrom.bind(null, date);\r\n\r\n    const date_ = toDate(date, context);\r\n    if (!result || result > date_ || isNaN(+date_)) result = date_;\r\n  });\r\n\r\n  return constructFrom(context, result || NaN);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default min;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { max } from \"./max.js\";\r\nimport { min } from \"./min.js\";\r\n\r\n/**\r\n * The {@link clamp} function options.\r\n */\r\n\r\n/**\r\n * The {@link clamp} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name clamp\r\n * @category Interval Helpers\r\n * @summary Return a date bounded by the start and the end of the given interval.\r\n *\r\n * @description\r\n * Clamps a date to the lower bound with the start of the interval and the upper\r\n * bound with the end of the interval.\r\n *\r\n * - When the date is less than the start of the interval, the start is returned.\r\n * - When the date is greater than the end of the interval, the end is returned.\r\n * - Otherwise the date is returned.\r\n *\r\n * @typeParam DateType - Date argument type.\r\n * @typeParam IntervalType - Interval argument type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param date - The date to be bounded\r\n * @param interval - The interval to bound to\r\n * @param options - An object with options\r\n *\r\n * @returns The date bounded by the start and the end of the interval\r\n *\r\n * @example\r\n * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021\r\n * const result = clamp(new Date(2021, 2, 21), {\r\n *   start: new Date(2021, 2, 22),\r\n *   end: new Date(2021, 3, 1),\r\n * })\r\n * //=> Mon Mar 22 2021 00:00:00\r\n */\r\nexport function clamp(date, interval, options) {\r\n  const [date_, start, end] = normalizeDates(\r\n    options?.in,\r\n    date,\r\n    interval.start,\r\n    interval.end,\r\n  );\r\n\r\n  return min([max([date_, start], options), end], options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default clamp;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name closestIndexTo\r\n * @category Common Helpers\r\n * @summary Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @description\r\n * Return an index of the closest date from the array comparing to the given date.\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns An index of the date closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const datesArray = [\r\n *   new Date(2015, 0, 1),\r\n *   new Date(2016, 0, 1),\r\n *   new Date(2017, 0, 1)\r\n * ]\r\n * const result = closestIndexTo(dateToCompare, datesArray)\r\n * //=> 1\r\n */\r\nexport function closestIndexTo(dateToCompare, dates) {\r\n  // [TODO] It would be better to return -1 here rather than undefined, as this\r\n  // is how JS behaves, but it would be a breaking change, so we need\r\n  // to consider it for v4.\r\n  const timeToCompare = +toDate(dateToCompare);\r\n\r\n  if (isNaN(timeToCompare)) return NaN;\r\n\r\n  let result;\r\n  let minDistance;\r\n  dates.forEach((date, index) => {\r\n    const date_ = toDate(date);\r\n\r\n    if (isNaN(+date_)) {\r\n      result = NaN;\r\n      minDistance = NaN;\r\n      return;\r\n    }\r\n\r\n    const distance = Math.abs(timeToCompare - +date_);\r\n    if (result == null || distance < minDistance) {\r\n      result = index;\r\n      minDistance = distance;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default closestIndexTo;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { closestIndexTo } from \"./closestIndexTo.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link closestTo} function options.\r\n */\r\n\r\n/**\r\n * The {@link closestTo} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name closestTo\r\n * @category Common Helpers\r\n * @summary Return a date from the array closest to the given date.\r\n *\r\n * @description\r\n * Return a date from the array closest to the given date.\r\n *\r\n * @typeParam DateToCompare - Date to compare argument type.\r\n * @typeParam DatesType - Dates array argument type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param dateToCompare - The date to compare with\r\n * @param dates - The array to search\r\n *\r\n * @returns The date from the array closest to the given date or undefined if no valid value is given\r\n *\r\n * @example\r\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\r\n * const dateToCompare = new Date(2015, 8, 6)\r\n * const result = closestTo(dateToCompare, [\r\n *   new Date(2000, 0, 1),\r\n *   new Date(2030, 0, 1)\r\n * ])\r\n * //=> Tue Jan 01 2030 00:00:00\r\n */\r\nexport function closestTo(dateToCompare, dates, options) {\r\n  const [dateToCompare_, ...dates_] = normalizeDates(\r\n    options?.in,\r\n    dateToCompare,\r\n    ...dates,\r\n  );\r\n\r\n  const index = closestIndexTo(dateToCompare_, dates_);\r\n\r\n  if (typeof index === \"number\" && isNaN(index))\r\n    return constructFrom(dateToCompare_, NaN);\r\n\r\n  if (index !== undefined) return dates_[index];\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default closestTo;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name compareAsc\r\n * @category Common Helpers\r\n * @summary Compare the two dates and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return 1 if the first date is after the second,\r\n * -1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * @param dateLeft - The first date to compare\r\n * @param dateRight - The second date to compare\r\n *\r\n * @returns The result of the comparison\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989:\r\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\r\n * //=> -1\r\n *\r\n * @example\r\n * // Sort the array of dates:\r\n * const result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareAsc)\r\n * //=> [\r\n * //   Wed Feb 11 1987 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Sun Jul 02 1995 00:00:00\r\n * // ]\r\n */\r\nexport function compareAsc(dateLeft, dateRight) {\r\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\r\n\r\n  if (diff < 0) return -1;\r\n  else if (diff > 0) return 1;\r\n\r\n  // Return 0 if diff is 0; return NaN if diff is NaN\r\n  return diff;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default compareAsc;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name compareDesc\r\n * @category Common Helpers\r\n * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.\r\n *\r\n * @description\r\n * Compare the two dates and return -1 if the first date is after the second,\r\n * 1 if the first date is before the second or 0 if dates are equal.\r\n *\r\n * @param dateLeft - The first date to compare\r\n * @param dateRight - The second date to compare\r\n *\r\n * @returns The result of the comparison\r\n *\r\n * @example\r\n * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:\r\n * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))\r\n * //=> 1\r\n *\r\n * @example\r\n * // Sort the array of dates in reverse chronological order:\r\n * const result = [\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1989, 6, 10)\r\n * ].sort(compareDesc)\r\n * //=> [\r\n * //   Sun Jul 02 1995 00:00:00,\r\n * //   Mon Jul 10 1989 00:00:00,\r\n * //   Wed Feb 11 1987 00:00:00\r\n * // ]\r\n */\r\nexport function compareDesc(dateLeft, dateRight) {\r\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\r\n\r\n  if (diff > 0) return -1;\r\n  else if (diff < 0) return 1;\r\n\r\n  // Return 0 if diff is 0; return NaN if diff is NaN\r\n  return diff;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default compareDesc;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * @name constructNow\r\n * @category Generic Helpers\r\n * @summary Constructs a new current date using the passed value constructor.\r\n * @pure false\r\n *\r\n * @description\r\n * The function constructs a new current date using the constructor from\r\n * the reference date. It helps to build generic functions that accept date\r\n * extensions and use the current date.\r\n *\r\n * It defaults to `Date` if the passed reference date is a number or a string.\r\n *\r\n * @param date - The reference date to take constructor from\r\n *\r\n * @returns Current date initialized using the given date constructor\r\n *\r\n * @example\r\n * import { constructNow, isSameDay } from 'date-fns'\r\n *\r\n * function isToday<DateType extends Date>(\r\n *   date: DateArg<DateType>,\r\n * ): boolean {\r\n *   // If we were to use `new Date()` directly, the function would  behave\r\n *   // differently in different timezones and return false for the same date.\r\n *   return isSameDay(date, constructNow(date));\r\n * }\r\n */\r\nexport function constructNow(date) {\r\n  return constructFrom(date, Date.now());\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default constructNow;\r\n", "import { daysInWeek } from \"./constants.js\";\r\n\r\n/**\r\n * @name daysToWeeks\r\n * @category Conversion Helpers\r\n * @summary Convert days to weeks.\r\n *\r\n * @description\r\n * Convert a number of days to a full number of weeks.\r\n *\r\n * @param days - The number of days to be converted\r\n *\r\n * @returns The number of days converted in weeks\r\n *\r\n * @example\r\n * // Convert 14 days to weeks:\r\n * const result = daysToWeeks(14)\r\n * //=> 2\r\n *\r\n * @example\r\n * // It uses trunc rounding:\r\n * const result = daysToWeeks(13)\r\n * //=> 1\r\n */\r\nexport function daysToWeeks(days) {\r\n  const result = Math.trunc(days / daysInWeek);\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default daysToWeeks;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { addDays } from \"./addDays.js\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\r\nimport { isSameDay } from \"./isSameDay.js\";\r\nimport { isValid } from \"./isValid.js\";\r\nimport { isWeekend } from \"./isWeekend.js\";\r\n\r\n/**\r\n * The {@link differenceInBusinessDays} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInBusinessDays\r\n * @category Day Helpers\r\n * @summary Get the number of business days between the given dates.\r\n *\r\n * @description\r\n * Get the number of business day periods between the given dates.\r\n * Business days being days that aren't in the weekend.\r\n * Like `differenceInCalendarDays`, the function removes the times from\r\n * the dates before calculating the difference.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of business days\r\n *\r\n * @example\r\n * // How many business days are between\r\n * // 10 January 2014 and 20 July 2014?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 0, 10)\r\n * )\r\n * //=> 136\r\n *\r\n * // How many business days are between\r\n * // 30 November 2021 and 1 November 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 30),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 21\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 December 2021?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 11, 1)\r\n * )\r\n * //=> -22\r\n *\r\n * // How many business days are between\r\n * // 1 November 2021 and 1 November 2021 ?\r\n * const result = differenceInBusinessDays(\r\n *   new Date(2021, 10, 1),\r\n *   new Date(2021, 10, 1)\r\n * )\r\n * //=> 0\r\n */\r\nexport function differenceInBusinessDays(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  if (!isValid(laterDate_) || !isValid(earlierDate_)) return NaN;\r\n\r\n  const diff = differenceInCalendarDays(laterDate_, earlierDate_);\r\n  const sign = diff < 0 ? -1 : 1;\r\n  const weeks = Math.trunc(diff / 7);\r\n\r\n  let result = weeks * 5;\r\n  let movingDate = addDays(earlierDate_, weeks * 7);\r\n\r\n  // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\r\n  while (!isSameDay(laterDate_, movingDate)) {\r\n    // sign is used to account for both negative and positive differences\r\n    result += isWeekend(movingDate, options) ? 0 : sign;\r\n    movingDate = addDays(movingDate, sign);\r\n  }\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInBusinessDays;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\r\n\r\n/**\r\n * The {@link differenceInCalendarISOWeekYears} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarISOWeekYears\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the number of calendar ISO week-numbering years between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar ISO week-numbering years between the given dates.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of calendar ISO week-numbering years\r\n *\r\n * @example\r\n * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?\r\n * const result = differenceInCalendarISOWeekYears(\r\n *   new Date(2012, 0, 1),\r\n *   new Date(2010, 0, 1)\r\n * )\r\n * //=> 2\r\n */\r\nexport function differenceInCalendarISOWeekYears(\r\n  laterDate,\r\n  earlierDate,\r\n  options,\r\n) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return (\r\n    getISOWeekYear(laterDate_, options) - getISOWeekYear(earlierDate_, options)\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarISOWeekYears;\r\n", "import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { millisecondsInWeek } from \"./constants.js\";\r\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\r\n\r\n/**\r\n * The {@link differenceInCalendarISOWeeks} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarISOWeeks\r\n * @category ISO Week Helpers\r\n * @summary Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar ISO weeks between the given dates.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of calendar ISO weeks\r\n *\r\n * @example\r\n * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?\r\n * const result = differenceInCalendarISOWeeks(\r\n *   new Date(2014, 6, 21),\r\n *   new Date(2014, 6, 6),\r\n * );\r\n * //=> 3\r\n */\r\nexport function differenceInCalendarISOWeeks(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const startOfISOWeekLeft = startOfISOWeek(laterDate_);\r\n  const startOfISOWeekRight = startOfISOWeek(earlierDate_);\r\n\r\n  const timestampLeft =\r\n    +startOfISOWeekLeft - getTimezoneOffsetInMilliseconds(startOfISOWeekLeft);\r\n  const timestampRight =\r\n    +startOfISOWeekRight - getTimezoneOffsetInMilliseconds(startOfISOWeekRight);\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round((timestampLeft - timestampRight) / millisecondsInWeek);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarISOWeeks;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\n\r\n/**\r\n * The {@link differenceInCalendarMonths} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarMonths\r\n * @category Month Helpers\r\n * @summary Get the number of calendar months between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar months between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of calendar months\r\n *\r\n * @example\r\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\r\n * const result = differenceInCalendarMonths(\r\n *   new Date(2014, 8, 1),\r\n *   new Date(2014, 0, 31)\r\n * )\r\n * //=> 8\r\n */\r\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\r\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\r\n\r\n  return yearsDiff * 12 + monthsDiff;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarMonths;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link getQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name getQuarter\r\n * @category Quarter Helpers\r\n * @summary Get the year quarter of the given date.\r\n *\r\n * @description\r\n * Get the year quarter of the given date.\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options\r\n *\r\n * @returns The quarter\r\n *\r\n * @example\r\n * // Which quarter is 2 July 2014?\r\n * const result = getQuarter(new Date(2014, 6, 2));\r\n * //=> 3\r\n */\r\nexport function getQuarter(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const quarter = Math.trunc(_date.getMonth() / 3) + 1;\r\n  return quarter;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getQuarter;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { getQuarter } from \"./getQuarter.js\";\r\n\r\n/**\r\n * The {@link differenceInCalendarQuarters} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarQuarters\r\n * @category Quarter Helpers\r\n * @summary Get the number of calendar quarters between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar quarters between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of calendar quarters\r\n *\r\n * @example\r\n * // How many calendar quarters are between 31 December 2013 and 2 July 2014?\r\n * const result = differenceInCalendarQuarters(\r\n *   new Date(2014, 6, 2),\r\n *   new Date(2013, 11, 31)\r\n * )\r\n * //=> 3\r\n */\r\nexport function differenceInCalendarQuarters(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\r\n  const quartersDiff = getQuarter(laterDate_) - getQuarter(earlierDate_);\r\n\r\n  return yearsDiff * 4 + quartersDiff;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarQuarters;\r\n", "import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { millisecondsInWeek } from \"./constants.js\";\r\nimport { startOfWeek } from \"./startOfWeek.js\";\r\n\r\n/**\r\n * The {@link differenceInCalendarWeeks} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar weeks between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of calendar weeks\r\n *\r\n * @example\r\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5)\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInCalendarWeeks(\r\n *   new Date(2014, 6, 20),\r\n *   new Date(2014, 6, 5),\r\n *   { weekStartsOn: 1 }\r\n * )\r\n * //=> 2\r\n */\r\nexport function differenceInCalendarWeeks(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const laterStartOfWeek = startOfWeek(laterDate_, options);\r\n  const earlierStartOfWeek = startOfWeek(earlierDate_, options);\r\n\r\n  const laterTimestamp =\r\n    +laterStartOfWeek - getTimezoneOffsetInMilliseconds(laterStartOfWeek);\r\n  const earlierTimestamp =\r\n    +earlierStartOfWeek - getTimezoneOffsetInMilliseconds(earlierStartOfWeek);\r\n\r\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInWeek);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarWeeks;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\n\r\n/**\r\n * The {@link differenceInCalendarYears} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInCalendarYears\r\n * @category Year Helpers\r\n * @summary Get the number of calendar years between the given dates.\r\n *\r\n * @description\r\n * Get the number of calendar years between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n\r\n * @returns The number of calendar years\r\n *\r\n * @example\r\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\r\n * const result = differenceInCalendarYears(\r\n *   new Date(2015, 1, 11),\r\n *   new Date(2013, 11, 31)\r\n * );\r\n * //=> 2\r\n */\r\nexport function differenceInCalendarYears(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return laterDate_.getFullYear() - earlierDate_.getFullYear();\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInCalendarYears;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\r\n\r\n/**\r\n * The {@link differenceInDays} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInDays\r\n * @category Day Helpers\r\n * @summary Get the number of full days between the given dates.\r\n *\r\n * @description\r\n * Get the number of full day periods between two dates. Fractional days are\r\n * truncated towards zero.\r\n *\r\n * One \"full day\" is the distance between a local time in one day to the same\r\n * local time on the next or previous day. A full day can sometimes be less than\r\n * or more than 24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of full days according to the local timezone\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\r\n * const result = differenceInDays(\r\n *   new Date(2012, 6, 2, 0, 0),\r\n *   new Date(2011, 6, 2, 23, 0)\r\n * )\r\n * //=> 365\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\r\n * const result = differenceInDays(\r\n *   new Date(2011, 6, 3, 0, 1),\r\n *   new Date(2011, 6, 2, 23, 59)\r\n * )\r\n * //=> 0\r\n *\r\n * @example\r\n * // How many full days are between\r\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 92 days, even in\r\n * // time zones where DST starts and the\r\n * // period has only 92*24-1 hours.\r\n * const result = differenceInDays(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 1)\r\n * )\r\n * //=> 92\r\n */\r\nexport function differenceInDays(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\r\n  const difference = Math.abs(\r\n    differenceInCalendarDays(laterDate_, earlierDate_),\r\n  );\r\n\r\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\r\n\r\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\r\n  // If so, result must be decreased by 1 in absolute value\r\n  const isLastDayNotFull = Number(\r\n    compareLocalAsc(laterDate_, earlierDate_) === -sign,\r\n  );\r\n\r\n  const result = sign * (difference - isLastDayNotFull);\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Like `compareAsc` but uses local time not UTC, which is needed\r\n// for accurate equality comparisons of UTC timestamps that end up\r\n// having the same representation in local time, e.g. one hour before\r\n// DST ends vs. the instant that DST ends.\r\nfunction compareLocalAsc(laterDate, earlierDate) {\r\n  const diff =\r\n    laterDate.getFullYear() - earlierDate.getFullYear() ||\r\n    laterDate.getMonth() - earlierDate.getMonth() ||\r\n    laterDate.getDate() - earlierDate.getDate() ||\r\n    laterDate.getHours() - earlierDate.getHours() ||\r\n    laterDate.getMinutes() - earlierDate.getMinutes() ||\r\n    laterDate.getSeconds() - earlierDate.getSeconds() ||\r\n    laterDate.getMilliseconds() - earlierDate.getMilliseconds();\r\n\r\n  if (diff < 0) return -1;\r\n  if (diff > 0) return 1;\r\n\r\n  // Return 0 if diff is 0; return NaN if diff is NaN\r\n  return diff;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInDays;\r\n", "export function getRoundingMethod(method) {\r\n  return (number) => {\r\n    const round = method ? Math[method] : Math.trunc;\r\n    const result = round(number);\r\n    // Prevent negative zero\r\n    return result === 0 ? 0 : result;\r\n  };\r\n}\r\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { millisecondsInHour } from \"./constants.js\";\r\n\r\n/**\r\n * The {@link differenceInHours} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInHours\r\n * @category Hour Helpers\r\n * @summary Get the number of hours between the given dates.\r\n *\r\n * @description\r\n * Get the number of hours between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of hours\r\n *\r\n * @example\r\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\r\n * const result = differenceInHours(\r\n *   new Date(2014, 6, 2, 19, 0),\r\n *   new Date(2014, 6, 2, 6, 50)\r\n * )\r\n * //=> 12\r\n */\r\nexport function differenceInHours(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\r\n  return getRoundingMethod(options?.roundingMethod)(diff);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInHours;\r\n", "import { addISOWeekYears } from \"./addISOWeekYears.js\";\r\n\r\n/**\r\n * The {@link subISOWeekYears} function options.\r\n */\r\n\r\n/**\r\n * @name subISOWeekYears\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Subtract the specified number of ISO week-numbering years from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of ISO week-numbering years from the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of ISO week-numbering years to be subtracted.\r\n * @param options - The options\r\n *\r\n * @returns The new date with the ISO week-numbering years subtracted\r\n *\r\n * @example\r\n * // Subtract 5 ISO week-numbering years from 1 September 2014:\r\n * const result = subISOWeekYears(new Date(2014, 8, 1), 5)\r\n * //=> Mon Aug 31 2009 00:00:00\r\n */\r\nexport function subISOWeekYears(date, amount, options) {\r\n  return addISOWeekYears(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subISOWeekYears;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { compareAsc } from \"./compareAsc.js\";\r\nimport { differenceInCalendarISOWeekYears } from \"./differenceInCalendarISOWeekYears.js\";\r\nimport { subISOWeekYears } from \"./subISOWeekYears.js\";\r\n\r\n/**\r\n * The {@link differenceInISOWeekYears} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInISOWeekYears\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the number of full ISO week-numbering years between the given dates.\r\n *\r\n * @description\r\n * Get the number of full ISO week-numbering years between the given dates.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - The options\r\n *\r\n * @returns The number of full ISO week-numbering years\r\n *\r\n * @example\r\n * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?\r\n * const result = differenceInISOWeekYears(\r\n *   new Date(2012, 0, 1),\r\n *   new Date(2010, 0, 1)\r\n * )\r\n * // => 1\r\n */\r\nexport function differenceInISOWeekYears(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const sign = compareAsc(laterDate_, earlierDate_);\r\n  const diff = Math.abs(\r\n    differenceInCalendarISOWeekYears(laterDate_, earlierDate_, options),\r\n  );\r\n\r\n  const adjustedDate = subISOWeekYears(laterDate_, sign * diff, options);\r\n\r\n  const isLastISOWeekYearNotFull = Number(\r\n    compareAsc(adjustedDate, earlierDate_) === -sign,\r\n  );\r\n  const result = sign * (diff - isLastISOWeekYearNotFull);\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInISOWeekYears;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name differenceInMilliseconds\r\n * @category Millisecond Helpers\r\n * @summary Get the number of milliseconds between the given dates.\r\n *\r\n * @description\r\n * Get the number of milliseconds between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n *\r\n * @returns The number of milliseconds\r\n *\r\n * @example\r\n * // How many milliseconds are between\r\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\r\n * const result = differenceInMilliseconds(\r\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\r\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\r\n * )\r\n * //=> 1100\r\n */\r\nexport function differenceInMilliseconds(laterDate, earlierDate) {\r\n  return +toDate(laterDate) - +toDate(earlierDate);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInMilliseconds;\r\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { millisecondsInMinute } from \"./constants.js\";\r\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\r\n\r\n/**\r\n * The {@link differenceInMinutes} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInMinutes\r\n * @category Minute Helpers\r\n * @summary Get the number of minutes between the given dates.\r\n *\r\n * @description\r\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\r\n *\r\n * @param dateLeft - The later date\r\n * @param dateRight - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of minutes\r\n *\r\n * @example\r\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\r\n * const result = differenceInMinutes(\r\n *   new Date(2014, 6, 2, 12, 20, 0),\r\n *   new Date(2014, 6, 2, 12, 7, 59)\r\n * )\r\n * //=> 12\r\n *\r\n * @example\r\n * // How many minutes are between 10:01:59 and 10:00:00\r\n * const result = differenceInMinutes(\r\n *   new Date(2000, 0, 1, 10, 0, 0),\r\n *   new Date(2000, 0, 1, 10, 1, 59)\r\n * )\r\n * //=> -1\r\n */\r\nexport function differenceInMinutes(dateLeft, dateRight, options) {\r\n  const diff =\r\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\r\n  return getRoundingMethod(options?.roundingMethod)(diff);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInMinutes;\r\n", "import { endOfDay } from \"./endOfDay.js\";\r\nimport { endOfMonth } from \"./endOfMonth.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name isLastDayOfMonth\r\n * @category Month Helpers\r\n * @summary Is the given date the last day of a month?\r\n *\r\n * @description\r\n * Is the given date the last day of a month?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is the last day of a month\r\n *\r\n * @example\r\n * // Is 28 February 2014 the last day of a month?\r\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\r\n * //=> true\r\n */\r\nexport function isLastDayOfMonth(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  return +endOfDay(_date, options) === +endOfMonth(_date, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isLastDayOfMonth;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { compareAsc } from \"./compareAsc.js\";\r\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\r\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.js\";\r\n\r\n/**\r\n * The {@link differenceInMonths} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInMonths\r\n * @category Month Helpers\r\n * @summary Get the number of full months between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of full months\r\n *\r\n * @example\r\n * // How many full months are between 31 January 2014 and 1 September 2014?\r\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\r\n * //=> 7\r\n */\r\nexport function differenceInMonths(laterDate, earlierDate, options) {\r\n  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  const sign = compareAsc(workingLaterDate, earlierDate_);\r\n  const difference = Math.abs(\r\n    differenceInCalendarMonths(workingLaterDate, earlierDate_),\r\n  );\r\n\r\n  if (difference < 1) return 0;\r\n\r\n  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)\r\n    workingLaterDate.setDate(30);\r\n\r\n  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\r\n\r\n  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;\r\n\r\n  if (\r\n    isLastDayOfMonth(laterDate_) &&\r\n    difference === 1 &&\r\n    compareAsc(laterDate_, earlierDate_) === 1\r\n  ) {\r\n    isLastMonthNotFull = false;\r\n  }\r\n\r\n  const result = sign * (difference - +isLastMonthNotFull);\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInMonths;\r\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { differenceInMonths } from \"./differenceInMonths.js\";\r\n\r\n/**\r\n * The {@link differenceInQuarters} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInQuarters\r\n * @category Quarter Helpers\r\n * @summary Get the number of quarters between the given dates.\r\n *\r\n * @description\r\n * Get the number of quarters between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of full quarters\r\n *\r\n * @example\r\n * // How many full quarters are between 31 December 2013 and 2 July 2014?\r\n * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))\r\n * //=> 2\r\n */\r\nexport function differenceInQuarters(laterDate, earlierDate, options) {\r\n  const diff = differenceInMonths(laterDate, earlierDate, options) / 3;\r\n  return getRoundingMethod(options?.roundingMethod)(diff);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInQuarters;\r\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\r\n\r\n/**\r\n * The {@link differenceInSeconds} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInSeconds\r\n * @category Second Helpers\r\n * @summary Get the number of seconds between the given dates.\r\n *\r\n * @description\r\n * Get the number of seconds between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of seconds\r\n *\r\n * @example\r\n * // How many seconds are between\r\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\r\n * const result = differenceInSeconds(\r\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\r\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\r\n * )\r\n * //=> 12\r\n */\r\nexport function differenceInSeconds(laterDate, earlierDate, options) {\r\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\r\n  return getRoundingMethod(options?.roundingMethod)(diff);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInSeconds;\r\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { differenceInDays } from \"./differenceInDays.js\";\r\n\r\n/**\r\n * The {@link differenceInWeeks} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInWeeks\r\n * @category Week Helpers\r\n * @summary Get the number of full weeks between the given dates.\r\n *\r\n * @description\r\n * Get the number of full weeks between two dates. Fractional weeks are\r\n * truncated towards zero by default.\r\n *\r\n * One \"full week\" is the distance between a local time in one day to the same\r\n * local time 7 days earlier or later. A full week can sometimes be less than\r\n * or more than 7*24 hours if a daylight savings change happens between two dates.\r\n *\r\n * To ignore DST and only measure exact 7*24-hour periods, use this instead:\r\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of full weeks\r\n *\r\n * @example\r\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\r\n * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\r\n * //=> 2\r\n *\r\n * @example\r\n * // How many full weeks are between\r\n * // 1 March 2020 0:00 and 6 June 2020 0:00 ?\r\n * // Note: because local time is used, the\r\n * // result will always be 8 weeks (54 days),\r\n * // even if DST starts and the period has\r\n * // only 54*24-1 hours.\r\n * const result = differenceInWeeks(\r\n *   new Date(2020, 5, 1),\r\n *   new Date(2020, 2, 6)\r\n * )\r\n * //=> 8\r\n */\r\nexport function differenceInWeeks(laterDate, earlierDate, options) {\r\n  const diff = differenceInDays(laterDate, earlierDate, options) / 7;\r\n  return getRoundingMethod(options?.roundingMethod)(diff);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInWeeks;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { compareAsc } from \"./compareAsc.js\";\r\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\r\n\r\n/**\r\n * The {@link differenceInYears} function options.\r\n */\r\n\r\n/**\r\n * @name differenceInYears\r\n * @category Year Helpers\r\n * @summary Get the number of full years between the given dates.\r\n *\r\n * @description\r\n * Get the number of full years between the given dates.\r\n *\r\n * @param laterDate - The later date\r\n * @param earlierDate - The earlier date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of full years\r\n *\r\n * @example\r\n * // How many full years are between 31 December 2013 and 11 February 2015?\r\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\r\n * //=> 1\r\n */\r\nexport function differenceInYears(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  // -1 if the left date is earlier than the right date\r\n  // 2023-12-31 - 2024-01-01 = -1\r\n  const sign = compareAsc(laterDate_, earlierDate_);\r\n\r\n  // First calculate the difference in calendar years\r\n  // 2024-01-01 - 2023-12-31 = 1 year\r\n  const diff = Math.abs(differenceInCalendarYears(laterDate_, earlierDate_));\r\n\r\n  // Now we need to calculate if the difference is full. To do that we set\r\n  // both dates to the same year and check if the both date's month and day\r\n  // form a full year.\r\n  laterDate_.setFullYear(1584);\r\n  earlierDate_.setFullYear(1584);\r\n\r\n  // For it to be true, when the later date is indeed later than the earlier date\r\n  // (2026-02-01 - 2023-12-10 = 3 years), the difference is full if\r\n  // the normalized later date is also later than the normalized earlier date.\r\n  // In our example, 1584-02-01 is earlier than 1584-12-10, so the difference\r\n  // is partial, hence we need to subtract 1 from the difference 3 - 1 = 2.\r\n  const partial = compareAsc(laterDate_, earlierDate_) === -sign;\r\n\r\n  const result = sign * (diff - +partial);\r\n\r\n  // Prevent negative zero\r\n  return result === 0 ? 0 : result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default differenceInYears;\r\n", "import { normalizeDates } from \"./normalizeDates.js\";\r\n\r\nexport function normalizeInterval(context, interval) {\r\n  const [start, end] = normalizeDates(context, interval.start, interval.end);\r\n  return { start, end };\r\n}\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link eachDayOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachDayOfInterval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name eachDayOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of dates within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of dates within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of days from the day of the interval start to the day of the interval end\r\n *\r\n * @example\r\n * // Each day between 6 October 2014 and 10 October 2014:\r\n * const result = eachDayOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 9, 10)\r\n * })\r\n * //=> [\r\n * //   Mon Oct 06 2014 00:00:00,\r\n * //   Tue Oct 07 2014 00:00:00,\r\n * //   Wed Oct 08 2014 00:00:00,\r\n * //   Thu Oct 09 2014 00:00:00,\r\n * //   Fri Oct 10 2014 00:00:00\r\n * // ]\r\n */\r\nexport function eachDayOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const endTime = reversed ? +start : +end;\r\n  const date = reversed ? end : start;\r\n  date.setHours(0, 0, 0, 0);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+date <= endTime) {\r\n    dates.push(constructFrom(start, date));\r\n    date.setDate(date.getDate() + step);\r\n    date.setHours(0, 0, 0, 0);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachDayOfInterval;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link eachHourOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachHourOfInterval} function result type.\r\n * Resolves to the appropriate date type based on inputs.\r\n */\r\n\r\n/**\r\n * @name eachHourOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of hours within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of hours within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end\r\n *\r\n * @example\r\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\r\n * const result = eachHourOfInterval({\r\n *   start: new Date(2014, 9, 6, 12),\r\n *   end: new Date(2014, 9, 6, 15)\r\n * });\r\n * //=> [\r\n * //   Mon Oct 06 2014 12:00:00,\r\n * //   Mon Oct 06 2014 13:00:00,\r\n * //   Mon Oct 06 2014 14:00:00,\r\n * //   Mon Oct 06 2014 15:00:00\r\n * // ]\r\n */\r\nexport function eachHourOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const endTime = reversed ? +start : +end;\r\n  const date = reversed ? end : start;\r\n  date.setMinutes(0, 0, 0);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+date <= endTime) {\r\n    dates.push(constructFrom(start, date));\r\n    date.setHours(date.getHours() + step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachHourOfInterval;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { addMinutes } from \"./addMinutes.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link eachMinuteOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachMinuteOfInterval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\r\nexport function eachMinuteOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n  // Set to the start of the minute\r\n  start.setSeconds(0, 0);\r\n\r\n  let reversed = +start > +end;\r\n  const endTime = reversed ? +start : +end;\r\n  let date = reversed ? end : start;\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+date <= endTime) {\r\n    dates.push(constructFrom(start, date));\r\n    date = addMinutes(date, step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachMinuteOfInterval;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link eachMonthOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachMonthOfInterval} function result type. It resolves the proper data type.\r\n */\r\n\r\n/**\r\n * @name eachMonthOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of months within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of months within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of months from the month of the interval start to the month of the interval end\r\n *\r\n * @example\r\n * // Each month between 6 February 2014 and 10 August 2014:\r\n * const result = eachMonthOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Sat Feb 01 2014 00:00:00,\r\n * //   Sat Mar 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Thu May 01 2014 00:00:00,\r\n * //   Sun Jun 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * //   Fri Aug 01 2014 00:00:00\r\n * // ]\r\n */\r\nexport function eachMonthOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const endTime = reversed ? +start : +end;\r\n  const date = reversed ? end : start;\r\n  date.setHours(0, 0, 0, 0);\r\n  date.setDate(1);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+date <= endTime) {\r\n    dates.push(constructFrom(start, date));\r\n    date.setMonth(date.getMonth() + step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachMonthOfInterval;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link startOfQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name startOfQuarter\r\n * @category Quarter Helpers\r\n * @summary Return the start of a year quarter for the given date.\r\n *\r\n * @description\r\n * Return the start of a year quarter for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - The options\r\n *\r\n * @returns The start of a quarter\r\n *\r\n * @example\r\n * // The start of a quarter for 2 September 2014 11:55:00:\r\n * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Tue Jul 01 2014 00:00:00\r\n */\r\nexport function startOfQuarter(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const currentMonth = _date.getMonth();\r\n  const month = currentMonth - (currentMonth % 3);\r\n  _date.setMonth(month, 1);\r\n  _date.setHours(0, 0, 0, 0);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfQuarter;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { addQuarters } from \"./addQuarters.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { startOfQuarter } from \"./startOfQuarter.js\";\r\n\r\n/**\r\n * The {@link eachQuarterOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name eachQuarterOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of quarters within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of quarters within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval\r\n * @param options - An object with options\r\n *\r\n * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\r\n *\r\n * @example\r\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\r\n * const result = eachQuarterOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2014, 7, 10),\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Tue Apr 01 2014 00:00:00,\r\n * //   Tue Jul 01 2014 00:00:00,\r\n * // ]\r\n */\r\nexport function eachQuarterOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const endTime = reversed ? +startOfQuarter(start) : +startOfQuarter(end);\r\n  let date = reversed ? startOfQuarter(end) : startOfQuarter(start);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+date <= endTime) {\r\n    dates.push(constructFrom(start, date));\r\n    date = addQuarters(date, step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachQuarterOfInterval;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { addWeeks } from \"./addWeeks.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { startOfWeek } from \"./startOfWeek.js\";\r\n\r\n/**\r\n * The {@link eachWeekOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachWeekOfInterval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the interval start date,\r\n * then the end interval date. If a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name eachWeekOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of weeks within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of weeks within the specified time interval.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of weeks from the week of the interval start to the week of the interval end\r\n *\r\n * @example\r\n * // Each week within interval 6 October 2014 - 23 November 2014:\r\n * const result = eachWeekOfInterval({\r\n *   start: new Date(2014, 9, 6),\r\n *   end: new Date(2014, 10, 23)\r\n * })\r\n * //=> [\r\n * //   Sun Oct 05 2014 00:00:00,\r\n * //   Sun Oct 12 2014 00:00:00,\r\n * //   Sun Oct 19 2014 00:00:00,\r\n * //   Sun Oct 26 2014 00:00:00,\r\n * //   Sun Nov 02 2014 00:00:00,\r\n * //   Sun Nov 09 2014 00:00:00,\r\n * //   Sun Nov 16 2014 00:00:00,\r\n * //   Sun Nov 23 2014 00:00:00\r\n * // ]\r\n */\r\nexport function eachWeekOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const startDateWeek = reversed\r\n    ? startOfWeek(end, options)\r\n    : startOfWeek(start, options);\r\n  const endDateWeek = reversed\r\n    ? startOfWeek(start, options)\r\n    : startOfWeek(end, options);\r\n\r\n  startDateWeek.setHours(15);\r\n  endDateWeek.setHours(15);\r\n\r\n  const endTime = +endDateWeek.getTime();\r\n  let currentDate = startDateWeek;\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+currentDate <= endTime) {\r\n    currentDate.setHours(0);\r\n    dates.push(constructFrom(start, currentDate));\r\n    currentDate = addWeeks(currentDate, step);\r\n    currentDate.setHours(15);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekOfInterval;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { eachDayOfInterval } from \"./eachDayOfInterval.js\";\r\nimport { isWeekend } from \"./isWeekend.js\";\r\n\r\n/**\r\n * The {@link eachWeekendOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachWeekendOfInterval} function result type.\r\n */\r\n\r\n/**\r\n * @name eachWeekendOfInterval\r\n * @category Interval Helpers\r\n * @summary List all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given date interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The given interval\r\n * @param options - An object with options\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given date interval\r\n * const result = eachWeekendOfInterval({\r\n *   start: new Date(2018, 8, 17),\r\n *   end: new Date(2018, 8, 30)\r\n * })\r\n * //=> [\r\n * //   Sat Sep 22 2018 00:00:00,\r\n * //   Sun Sep 23 2018 00:00:00,\r\n * //   Sat Sep 29 2018 00:00:00,\r\n * //   Sun Sep 30 2018 00:00:00\r\n * // ]\r\n */\r\nexport function eachWeekendOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n  const dateInterval = eachDayOfInterval({ start, end }, options);\r\n  const weekends = [];\r\n  let index = 0;\r\n  while (index < dateInterval.length) {\r\n    const date = dateInterval[index++];\r\n    if (isWeekend(date)) weekends.push(constructFrom(start, date));\r\n  }\r\n  return weekends;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekendOfInterval;\r\n", "import { eachWeekendOfInterval } from \"./eachWeekendOfInterval.js\";\r\nimport { endOfMonth } from \"./endOfMonth.js\";\r\nimport { startOfMonth } from \"./startOfMonth.js\";\r\n\r\n/**\r\n * The {@link eachWeekendOfMonth} function options.\r\n */\r\n\r\n/**\r\n * @name eachWeekendOfMonth\r\n * @category Month Helpers\r\n * @summary List all the Saturdays and Sundays in the given month.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given month.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The given month\r\n * @param options - An object with options\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given month\r\n * const result = eachWeekendOfMonth(new Date(2022, 1, 1))\r\n * //=> [\r\n * //   Sat Feb 05 2022 00:00:00,\r\n * //   Sun Feb 06 2022 00:00:00,\r\n * //   Sat Feb 12 2022 00:00:00,\r\n * //   Sun Feb 13 2022 00:00:00,\r\n * //   Sat Feb 19 2022 00:00:00,\r\n * //   Sun Feb 20 2022 00:00:00,\r\n * //   Sat Feb 26 2022 00:00:00,\r\n * //   Sun Feb 27 2022 00:00:00\r\n * // ]\r\n */\r\nexport function eachWeekendOfMonth(date, options) {\r\n  const start = startOfMonth(date, options);\r\n  const end = endOfMonth(date, options);\r\n  return eachWeekendOfInterval({ start, end }, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekendOfMonth;\r\n", "import { eachWeekendOfInterval } from \"./eachWeekendOfInterval.js\";\r\nimport { endOfYear } from \"./endOfYear.js\";\r\nimport { startOfYear } from \"./startOfYear.js\";\r\n\r\n/**\r\n * The {@link eachWeekendOfYear} function options.\r\n */\r\n\r\n/**\r\n * @name eachWeekendOfYear\r\n * @category Year Helpers\r\n * @summary List all the Saturdays and Sundays in the year.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the year.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The given year\r\n * @param options - An object with options\r\n *\r\n * @returns An array containing all the Saturdays and Sundays\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the year\r\n * const result = eachWeekendOfYear(new Date(2020, 1, 1))\r\n * //=> [\r\n * //   Sat Jan 03 2020 00:00:00,\r\n * //   Sun Jan 04 2020 00:00:00,\r\n * //   ...\r\n * //   Sun Dec 27 2020 00:00:00\r\n * // ]\r\n * ]\r\n */\r\nexport function eachWeekendOfYear(date, options) {\r\n  const start = startOfYear(date, options);\r\n  const end = endOfYear(date, options);\r\n  return eachWeekendOfInterval({ start, end }, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachWeekendOfYear;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\n\r\n/**\r\n * The {@link eachYearOfInterval} function options.\r\n */\r\n\r\n/**\r\n * The {@link eachYearOfInterval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the date argument,\r\n * then the start interval date, and finally the end interval date. If\r\n * a context function is passed, it uses the context function return type.\r\n */\r\n\r\n/**\r\n * @name eachYearOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @description\r\n * Return the array of yearly timestamps within the specified time interval.\r\n *\r\n * @typeParam IntervalType - Interval type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param interval - The interval.\r\n * @param options - An object with options.\r\n *\r\n * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end\r\n *\r\n * @example\r\n * // Each year between 6 February 2014 and 10 August 2017:\r\n * const result = eachYearOfInterval({\r\n *   start: new Date(2014, 1, 6),\r\n *   end: new Date(2017, 7, 10)\r\n * })\r\n * //=> [\r\n * //   Wed Jan 01 2014 00:00:00,\r\n * //   Thu Jan 01 2015 00:00:00,\r\n * //   Fri Jan 01 2016 00:00:00,\r\n * //   Sun Jan 01 2017 00:00:00\r\n * // ]\r\n */\r\nexport function eachYearOfInterval(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n\r\n  let reversed = +start > +end;\r\n  const endTime = reversed ? +start : +end;\r\n  const date = reversed ? end : start;\r\n  date.setHours(0, 0, 0, 0);\r\n  date.setMonth(0, 1);\r\n\r\n  let step = options?.step ?? 1;\r\n  if (!step) return [];\r\n  if (step < 0) {\r\n    step = -step;\r\n    reversed = !reversed;\r\n  }\r\n\r\n  const dates = [];\r\n\r\n  while (+date <= endTime) {\r\n    dates.push(constructFrom(start, date));\r\n    date.setFullYear(date.getFullYear() + step);\r\n  }\r\n\r\n  return reversed ? dates.reverse() : dates;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default eachYearOfInterval;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link endOfDecade} function options.\r\n */\r\n\r\n/**\r\n * @name endOfDecade\r\n * @category Decade Helpers\r\n * @summary Return the end of a decade for the given date.\r\n *\r\n * @description\r\n * Return the end of a decade for the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The end of a decade\r\n *\r\n * @example\r\n * // The end of a decade for 12 May 1984 00:00:00:\r\n * const result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))\r\n * //=> Dec 31 1989 23:59:59.999\r\n */\r\nexport function endOfDecade(date, options) {\r\n  // TODO: Switch to more technical definition in of decades that start with 1\r\n  // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking\r\n  // change, so it can only be done in 4.0.\r\n  const _date = toDate(date, options?.in);\r\n  const year = _date.getFullYear();\r\n  const decade = 9 + Math.floor(year / 10) * 10;\r\n  _date.setFullYear(decade, 11, 31);\r\n  _date.setHours(23, 59, 59, 999);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfDecade;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link endOfHour} function options.\r\n */\r\n\r\n/**\r\n * @name endOfHour\r\n * @category Hour Helpers\r\n * @summary Return the end of an hour for the given date.\r\n *\r\n * @description\r\n * Return the end of an hour for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The end of an hour\r\n *\r\n * @example\r\n * // The end of an hour for 2 September 2014 11:55:00:\r\n * const result = endOfHour(new Date(2014, 8, 2, 11, 55))\r\n * //=> Tue Sep 02 2014 11:59:59.999\r\n */\r\nexport function endOfHour(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  _date.setMinutes(59, 59, 999);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfHour;\r\n", "import { endOfWeek } from \"./endOfWeek.js\";\r\n\r\n/**\r\n * The {@link endOfISOWeek} function options.\r\n */\r\n\r\n/**\r\n * @name endOfISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Return the end of an ISO week for the given date.\r\n *\r\n * @description\r\n * Return the end of an ISO week for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The end of an ISO week\r\n *\r\n * @example\r\n * // The end of an ISO week for 2 September 2014 11:55:00:\r\n * const result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Sun Sep 07 2014 23:59:59.999\r\n */\r\nexport function endOfISOWeek(date, options) {\r\n  return endOfWeek(date, { ...options, weekStartsOn: 1 });\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfISOWeek;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\r\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\r\n\r\n/**\r\n * The {@link endOfISOWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name endOfISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Return the end of an ISO week-numbering year for the given date.\r\n *\r\n * @description\r\n * Return the end of an ISO week-numbering year,\r\n * which always starts 3 days before the year's first Thursday.\r\n * The result will be in the local timezone.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ContextDate - The `Date` type of the context function.\r\n *\r\n * @param date - The original date\r\n * @param options - The options\r\n *\r\n * @returns The end of an ISO week-numbering year\r\n *\r\n * @example\r\n * // The end of an ISO week-numbering year for 2 July 2005:\r\n * const result = endOfISOWeekYear(new Date(2005, 6, 2))\r\n * //=> Sun Jan 01 2006 23:59:59.999\r\n */\r\nexport function endOfISOWeekYear(date, options) {\r\n  const year = getISOWeekYear(date, options);\r\n  const fourthOfJanuaryOfNextYear = constructFrom(options?.in || date, 0);\r\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\r\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\r\n  const _date = startOfISOWeek(fourthOfJanuaryOfNextYear, options);\r\n  _date.setMilliseconds(_date.getMilliseconds() - 1);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfISOWeekYear;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link endOfMinute} function options.\r\n */\r\n\r\n/**\r\n * @name endOfMinute\r\n * @category Minute Helpers\r\n * @summary Return the end of a minute for the given date.\r\n *\r\n * @description\r\n * Return the end of a minute for the given date.\r\n * The result will be in the local timezone or the provided context.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The end of a minute\r\n *\r\n * @example\r\n * // The end of a minute for 1 December 2014 22:15:45.400:\r\n * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\r\n * //=> Mon Dec 01 2014 22:15:59.999\r\n */\r\nexport function endOfMinute(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  _date.setSeconds(59, 999);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfMinute;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link endOfQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name endOfQuarter\r\n * @category Quarter Helpers\r\n * @summary Return the end of a year quarter for the given date.\r\n *\r\n * @description\r\n * Return the end of a year quarter for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The end of a quarter\r\n *\r\n * @example\r\n * // The end of a quarter for 2 September 2014 11:55:00:\r\n * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Tue Sep 30 2014 23:59:59.999\r\n */\r\nexport function endOfQuarter(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const currentMonth = _date.getMonth();\r\n  const month = currentMonth - (currentMonth % 3) + 3;\r\n  _date.setMonth(month, 0);\r\n  _date.setHours(23, 59, 59, 999);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfQuarter;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link endOfSecond} function options.\r\n */\r\n\r\n/**\r\n * @name endOfSecond\r\n * @category Second Helpers\r\n * @summary Return the end of a second for the given date.\r\n *\r\n * @description\r\n * Return the end of a second for the given date.\r\n * The result will be in the local timezone if no `in` option is specified.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The end of a second\r\n *\r\n * @example\r\n * // The end of a second for 1 December 2014 22:15:45.400:\r\n * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\r\n * //=> Mon Dec 01 2014 22:15:45.999\r\n */\r\nexport function endOfSecond(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  _date.setMilliseconds(999);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfSecond;\r\n", "import { endOfDay } from \"./endOfDay.js\";\r\n\r\n/**\r\n * The {@link endOfToday} function options.\r\n */\r\n\r\n/**\r\n * @name endOfToday\r\n * @category Day Helpers\r\n * @summary Return the end of today.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the end of today.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param options - The options\r\n *\r\n * @returns The end of today\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = endOfToday()\r\n * //=> Mon Oct 6 2014 23:59:59.999\r\n */\r\nexport function endOfToday(options) {\r\n  return endOfDay(Date.now(), options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfToday;\r\n", "import { constructNow } from \"./constructNow.js\";\r\n\r\n/**\r\n * The {@link endOfTomorrow} function options.\r\n */\r\n\r\n/**\r\n * @name endOfTomorrow\r\n * @category Day Helpers\r\n * @summary Return the end of tomorrow.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the end of tomorrow.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param options - The options\r\n * @returns The end of tomorrow\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = endOfTomorrow()\r\n * //=> Tue Oct 7 2014 23:59:59.999\r\n */\r\nexport function endOfTomorrow(options) {\r\n  const now = constructNow(options?.in);\r\n  const year = now.getFullYear();\r\n  const month = now.getMonth();\r\n  const day = now.getDate();\r\n\r\n  const date = constructNow(options?.in);\r\n  date.setFullYear(year, month, day + 1);\r\n  date.setHours(23, 59, 59, 999);\r\n  return options?.in ? options.in(date) : date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfTomorrow;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\n\r\n/**\r\n * The {@link endOfYesterday} function options.\r\n */\r\n\r\n/**\r\n * @name endOfYesterday\r\n * @category Day Helpers\r\n * @summary Return the end of yesterday.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the end of yesterday.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @returns The end of yesterday\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = endOfYesterday()\r\n * //=> Sun Oct 5 2014 23:59:59.999\r\n */\r\nexport function endOfYesterday(options) {\r\n  const now = constructNow(options?.in);\r\n  const date = constructFrom(options?.in, 0);\r\n  date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate() - 1);\r\n  date.setHours(23, 59, 59, 999);\r\n  return date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default endOfYesterday;\r\n", "import { defaultLocale } from \"./_lib/defaultLocale.js\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { compareAsc } from \"./compareAsc.js\";\r\nimport { minutesInDay, minutesInMonth } from \"./constants.js\";\r\nimport { differenceInMonths } from \"./differenceInMonths.js\";\r\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\r\n\r\n/**\r\n * The {@link formatDistance} function options.\r\n */\r\n\r\n/**\r\n * @name formatDistance\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words.\r\n *\r\n * | Distance between dates                                            | Result              |\r\n * |-------------------------------------------------------------------|---------------------|\r\n * | 0 ... 30 secs                                                     | less than a minute  |\r\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\r\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\r\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\r\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\r\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\r\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\r\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\r\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\r\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\r\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\r\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\r\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\r\n * | N yrs ... N yrs 3 months                                          | about N years       |\r\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\r\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\r\n *\r\n * With `options.includeSeconds == true`:\r\n * | Distance between dates | Result               |\r\n * |------------------------|----------------------|\r\n * | 0 secs ... 5 secs      | less than 5 seconds  |\r\n * | 5 secs ... 10 secs     | less than 10 seconds |\r\n * | 10 secs ... 20 secs    | less than 20 seconds |\r\n * | 20 secs ... 40 secs    | half a minute        |\r\n * | 40 secs ... 60 secs    | less than a minute   |\r\n * | 60 secs ... 90 secs    | 1 minute             |\r\n *\r\n * @param laterDate - The date\r\n * @param earlierDate - The date to compare with\r\n * @param options - An object with options\r\n *\r\n * @returns The distance in words\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `baseDate` must not be Invalid Date\r\n * @throws `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00, including seconds?\r\n * const result = formatDistance(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0),\r\n *   { includeSeconds: true }\r\n * )\r\n * //=> 'less than 20 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\r\n *   addSuffix: true\r\n * })\r\n * //=> 'about 1 year ago'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\r\n *   locale: eoLocale\r\n * })\r\n * //=> 'pli ol 1 jaro'\r\n */\r\nexport function formatDistance(laterDate, earlierDate, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\r\n  const minutesInAlmostTwoDays = 2520;\r\n\r\n  const comparison = compareAsc(laterDate, earlierDate);\r\n\r\n  if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\r\n\r\n  const localizeOptions = Object.assign({}, options, {\r\n    addSuffix: options?.addSuffix,\r\n    comparison: comparison,\r\n  });\r\n\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\r\n  );\r\n\r\n  const seconds = differenceInSeconds(earlierDate_, laterDate_);\r\n  const offsetInSeconds =\r\n    (getTimezoneOffsetInMilliseconds(earlierDate_) -\r\n      getTimezoneOffsetInMilliseconds(laterDate_)) /\r\n    1000;\r\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\r\n  let months;\r\n\r\n  // 0 up to 2 mins\r\n  if (minutes < 2) {\r\n    if (options?.includeSeconds) {\r\n      if (seconds < 5) {\r\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\r\n      } else if (seconds < 10) {\r\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\r\n      } else if (seconds < 20) {\r\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\r\n      } else if (seconds < 40) {\r\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\r\n      } else if (seconds < 60) {\r\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\r\n      } else {\r\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\r\n      }\r\n    } else {\r\n      if (minutes === 0) {\r\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\r\n      } else {\r\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\r\n      }\r\n    }\r\n\r\n    // 2 mins up to 0.75 hrs\r\n  } else if (minutes < 45) {\r\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\r\n\r\n    // 0.75 hrs up to 1.5 hrs\r\n  } else if (minutes < 90) {\r\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\r\n\r\n    // 1.5 hrs up to 24 hrs\r\n  } else if (minutes < minutesInDay) {\r\n    const hours = Math.round(minutes / 60);\r\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\r\n\r\n    // 1 day up to 1.75 days\r\n  } else if (minutes < minutesInAlmostTwoDays) {\r\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\r\n\r\n    // 1.75 days up to 30 days\r\n  } else if (minutes < minutesInMonth) {\r\n    const days = Math.round(minutes / minutesInDay);\r\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\r\n\r\n    // 1 month up to 2 months\r\n  } else if (minutes < minutesInMonth * 2) {\r\n    months = Math.round(minutes / minutesInMonth);\r\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\r\n  }\r\n\r\n  months = differenceInMonths(earlierDate_, laterDate_);\r\n\r\n  // 2 months up to 12 months\r\n  if (months < 12) {\r\n    const nearestMonth = Math.round(minutes / minutesInMonth);\r\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\r\n\r\n    // 1 year up to max Date\r\n  } else {\r\n    const monthsSinceStartOfYear = months % 12;\r\n    const years = Math.trunc(months / 12);\r\n\r\n    // N years up to 1 years 3 months\r\n    if (monthsSinceStartOfYear < 3) {\r\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\r\n\r\n      // N years 3 months up to N years 9 months\r\n    } else if (monthsSinceStartOfYear < 9) {\r\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\r\n\r\n      // N years 9 months up to N year 12 months\r\n    } else {\r\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\r\n    }\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatDistance;\r\n", "import { defaultLocale } from \"./_lib/defaultLocale.js\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\nimport { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { compareAsc } from \"./compareAsc.js\";\r\nimport {\r\n  millisecondsInMinute,\r\n  minutesInDay,\r\n  minutesInMonth,\r\n  minutesInYear,\r\n} from \"./constants.js\";\r\n\r\n/**\r\n * The {@link formatDistanceStrict} function options.\r\n */\r\n\r\n/**\r\n * The unit used to format the distance in {@link formatDistanceStrict}.\r\n */\r\n\r\n/**\r\n * @name formatDistanceStrict\r\n * @category Common Helpers\r\n * @summary Return the distance between the given dates in words.\r\n *\r\n * @description\r\n * Return the distance between the given dates in words, using strict units.\r\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\r\n * 'less than' and the like.\r\n *\r\n * | Distance between dates | Result              |\r\n * |------------------------|---------------------|\r\n * | 0 ... 59 secs          | [0..59] seconds     |\r\n * | 1 ... 59 mins          | [1..59] minutes     |\r\n * | 1 ... 23 hrs           | [1..23] hours       |\r\n * | 1 ... 29 days          | [1..29] days        |\r\n * | 1 ... 11 months        | [1..11] months      |\r\n * | 1 ... N years          | [1..N]  years       |\r\n *\r\n * @param laterDate - The date\r\n * @param earlierDate - The date to compare with\r\n * @param options - An object with options\r\n *\r\n * @returns The distance in words\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `baseDate` must not be Invalid Date\r\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\r\n * @throws `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // What is the distance between 2 July 2014 and 1 January 2015?\r\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // What is the distance between 1 January 2015 00:00:15\r\n * // and 1 January 2015 00:00:00?\r\n * const result = formatDistanceStrict(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   new Date(2015, 0, 1, 0, 0, 0)\r\n * )\r\n * //=> '15 seconds'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, with a suffix?\r\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\r\n *   addSuffix: true\r\n * })\r\n * //=> '1 year ago'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2016\r\n * // to 1 January 2015, in minutes?\r\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\r\n *   unit: 'minute'\r\n * })\r\n * //=> '525600 minutes'\r\n *\r\n * @example\r\n * // What is the distance from 1 January 2015\r\n * // to 28 January 2015, in months, rounded up?\r\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\r\n *   unit: 'month',\r\n *   roundingMethod: 'ceil'\r\n * })\r\n * //=> '1 month'\r\n *\r\n * @example\r\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\r\n *   locale: eoLocale\r\n * })\r\n * //=> '1 jaro'\r\n */\r\n\r\nexport function formatDistanceStrict(laterDate, earlierDate, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\r\n\r\n  const comparison = compareAsc(laterDate, earlierDate);\r\n\r\n  if (isNaN(comparison)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const localizeOptions = Object.assign({}, options, {\r\n    addSuffix: options?.addSuffix,\r\n    comparison: comparison,\r\n  });\r\n\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\r\n  );\r\n\r\n  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? \"round\");\r\n\r\n  const milliseconds = earlierDate_.getTime() - laterDate_.getTime();\r\n  const minutes = milliseconds / millisecondsInMinute;\r\n\r\n  const timezoneOffset =\r\n    getTimezoneOffsetInMilliseconds(earlierDate_) -\r\n    getTimezoneOffsetInMilliseconds(laterDate_);\r\n\r\n  // Use DST-normalized difference in minutes for years, months and days;\r\n  // use regular difference in minutes for hours, minutes and seconds.\r\n  const dstNormalizedMinutes =\r\n    (milliseconds - timezoneOffset) / millisecondsInMinute;\r\n\r\n  const defaultUnit = options?.unit;\r\n  let unit;\r\n  if (!defaultUnit) {\r\n    if (minutes < 1) {\r\n      unit = \"second\";\r\n    } else if (minutes < 60) {\r\n      unit = \"minute\";\r\n    } else if (minutes < minutesInDay) {\r\n      unit = \"hour\";\r\n    } else if (dstNormalizedMinutes < minutesInMonth) {\r\n      unit = \"day\";\r\n    } else if (dstNormalizedMinutes < minutesInYear) {\r\n      unit = \"month\";\r\n    } else {\r\n      unit = \"year\";\r\n    }\r\n  } else {\r\n    unit = defaultUnit;\r\n  }\r\n\r\n  // 0 up to 60 seconds\r\n  if (unit === \"second\") {\r\n    const seconds = roundingMethod(milliseconds / 1000);\r\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\r\n\r\n    // 1 up to 60 mins\r\n  } else if (unit === \"minute\") {\r\n    const roundedMinutes = roundingMethod(minutes);\r\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\r\n\r\n    // 1 up to 24 hours\r\n  } else if (unit === \"hour\") {\r\n    const hours = roundingMethod(minutes / 60);\r\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\r\n\r\n    // 1 up to 30 days\r\n  } else if (unit === \"day\") {\r\n    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);\r\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\r\n\r\n    // 1 up to 12 months\r\n  } else if (unit === \"month\") {\r\n    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\r\n    return months === 12 && defaultUnit !== \"month\"\r\n      ? locale.formatDistance(\"xYears\", 1, localizeOptions)\r\n      : locale.formatDistance(\"xMonths\", months, localizeOptions);\r\n\r\n    // 1 year up to max Date\r\n  } else {\r\n    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);\r\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\r\n  }\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatDistanceStrict;\r\n", "import { constructNow } from \"./constructNow.js\";\r\n\r\nimport { formatDistance } from \"./formatDistance.js\";\r\n\r\n/**\r\n * The {@link formatDistanceToNow} function options.\r\n */\r\n\r\n/**\r\n * @name formatDistanceToNow\r\n * @category Common Helpers\r\n * @summary Return the distance between the given date and now in words.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the distance between the given date and now in words.\r\n *\r\n * | Distance to now                                                   | Result              |\r\n * |-------------------------------------------------------------------|---------------------|\r\n * | 0 ... 30 secs                                                     | less than a minute  |\r\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\r\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\r\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\r\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\r\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\r\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\r\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\r\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\r\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\r\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\r\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\r\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\r\n * | N yrs ... N yrs 3 months                                          | about N years       |\r\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\r\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\r\n *\r\n * With `options.includeSeconds == true`:\r\n * | Distance to now     | Result               |\r\n * |---------------------|----------------------|\r\n * | 0 secs ... 5 secs   | less than 5 seconds  |\r\n * | 5 secs ... 10 secs  | less than 10 seconds |\r\n * | 10 secs ... 20 secs | less than 20 seconds |\r\n * | 20 secs ... 40 secs | half a minute        |\r\n * | 40 secs ... 60 secs | less than a minute   |\r\n * | 60 secs ... 90 secs | 1 minute             |\r\n *\r\n * @param date - The given date\r\n * @param options - The object with options\r\n *\r\n * @returns The distance in words\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\r\n * const result = formatDistanceToNow(\r\n *   new Date(2014, 6, 2)\r\n * )\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // If now is 1 January 2015 00:00:00,\r\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\r\n * const result = formatDistanceToNow(\r\n *   new Date(2015, 0, 1, 0, 0, 15),\r\n *   {includeSeconds: true}\r\n * )\r\n * //=> 'less than 20 seconds'\r\n *\r\n * @example\r\n * // If today is 1 January 2015,\r\n * // what is the distance to 1 January 2016, with a suffix?\r\n * const result = formatDistanceToNow(\r\n *   new Date(2016, 0, 1),\r\n *   {addSuffix: true}\r\n * )\r\n * //=> 'in about 1 year'\r\n *\r\n * @example\r\n * // If today is 1 January 2015,\r\n * // what is the distance to 1 August 2016 in Esperanto?\r\n * const eoLocale = require('date-fns/locale/eo')\r\n * const result = formatDistanceToNow(\r\n *   new Date(2016, 7, 1),\r\n *   {locale: eoLocale}\r\n * )\r\n * //=> 'pli ol 1 jaro'\r\n */\r\nexport function formatDistanceToNow(date, options) {\r\n  return formatDistance(date, constructNow(date), options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatDistanceToNow;\r\n", "import { constructNow } from \"./constructNow.js\";\r\n\r\nimport { formatDistanceStrict } from \"./formatDistanceStrict.js\";\r\n\r\n/**\r\n * The {@link formatDistanceToNowStrict} function options.\r\n */\r\n\r\n/**\r\n * @name formatDistanceToNowStrict\r\n * @category Common Helpers\r\n * @summary Return the distance between the given date and now in words.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the distance between the given dates in words, using strict units.\r\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\r\n * 'less than' and the like.\r\n *\r\n * | Distance between dates | Result              |\r\n * |------------------------|---------------------|\r\n * | 0 ... 59 secs          | [0..59] seconds     |\r\n * | 1 ... 59 mins          | [1..59] minutes     |\r\n * | 1 ... 23 hrs           | [1..23] hours       |\r\n * | 1 ... 29 days          | [1..29] days        |\r\n * | 1 ... 11 months        | [1..11] months      |\r\n * | 1 ... N years          | [1..N]  years       |\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The distance in words\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `options.locale` must contain `formatDistance` property\r\n *\r\n * @example\r\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\r\n * const result = formatDistanceToNowStrict(\r\n *   new Date(2014, 6, 2)\r\n * )\r\n * //=> '6 months'\r\n *\r\n * @example\r\n * // If now is 1 January 2015 00:00:00,\r\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\r\n * const result = formatDistanceToNowStrict(\r\n *   new Date(2015, 0, 1, 0, 0, 15)\r\n * )\r\n * //=> '15 seconds'\r\n *\r\n * @example\r\n * // If today is 1 January 2015,\r\n * // what is the distance to 1 January 2016, with a suffix?\r\n * const result = formatDistanceToNowStrict(\r\n *   new Date(2016, 0, 1),\r\n *   {addSuffix: true}\r\n * )\r\n * //=> 'in 1 year'\r\n *\r\n * @example\r\n * // If today is 28 January 2015,\r\n * // what is the distance to 1 January 2015, in months, rounded up??\r\n * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\r\n *   unit: 'month',\r\n *   roundingMethod: 'ceil'\r\n * })\r\n * //=> '1 month'\r\n *\r\n * @example\r\n * // If today is 1 January 2015,\r\n * // what is the distance to 1 January 2016 in Esperanto?\r\n * const eoLocale = require('date-fns/locale/eo')\r\n * const result = formatDistanceToNowStrict(\r\n *   new Date(2016, 0, 1),\r\n *   {locale: eoLocale}\r\n * )\r\n * //=> '1 jaro'\r\n */\r\nexport function formatDistanceToNowStrict(date, options) {\r\n  return formatDistanceStrict(date, constructNow(date), options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatDistanceToNowStrict;\r\n", "import { defaultLocale } from \"./_lib/defaultLocale.js\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\n\r\n/**\r\n * The {@link formatDuration} function options.\r\n */\r\n\r\nconst defaultFormat = [\r\n  \"years\",\r\n  \"months\",\r\n  \"weeks\",\r\n  \"days\",\r\n  \"hours\",\r\n  \"minutes\",\r\n  \"seconds\",\r\n];\r\n\r\n/**\r\n * @name formatDuration\r\n * @category Common Helpers\r\n * @summary Formats a duration in human-readable format\r\n *\r\n * @description\r\n * Return human-readable duration string i.e. \"9 months 2 days\"\r\n *\r\n * @param duration - The duration to format\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @example\r\n * // Format full duration\r\n * formatDuration({\r\n *   years: 2,\r\n *   months: 9,\r\n *   weeks: 1,\r\n *   days: 7,\r\n *   hours: 5,\r\n *   minutes: 9,\r\n *   seconds: 30\r\n * })\r\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'\r\n *\r\n * @example\r\n * // Format partial duration\r\n * formatDuration({ months: 9, days: 2 })\r\n * //=> '9 months 2 days'\r\n *\r\n * @example\r\n * // Customize the format\r\n * formatDuration(\r\n *   {\r\n *     years: 2,\r\n *     months: 9,\r\n *     weeks: 1,\r\n *     days: 7,\r\n *     hours: 5,\r\n *     minutes: 9,\r\n *     seconds: 30\r\n *   },\r\n *   { format: ['months', 'weeks'] }\r\n * ) === '9 months 1 week'\r\n *\r\n * @example\r\n * // Customize the zeros presence\r\n * formatDuration({ years: 0, months: 9 })\r\n * //=> '9 months'\r\n * formatDuration({ years: 0, months: 9 }, { zero: true })\r\n * //=> '0 years 9 months'\r\n *\r\n * @example\r\n * // Customize the delimiter\r\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\r\n * //=> '2 years, 9 months, 3 weeks'\r\n */\r\nexport function formatDuration(duration, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\r\n  const format = options?.format ?? defaultFormat;\r\n  const zero = options?.zero ?? false;\r\n  const delimiter = options?.delimiter ?? \" \";\r\n\r\n  if (!locale.formatDistance) {\r\n    return \"\";\r\n  }\r\n\r\n  const result = format\r\n    .reduce((acc, unit) => {\r\n      const token = `x${unit.replace(/(^.)/, (m) => m.toUpperCase())}`;\r\n      const value = duration[unit];\r\n      if (value !== undefined && (zero || duration[unit])) {\r\n        return acc.concat(locale.formatDistance(token, value));\r\n      }\r\n      return acc;\r\n    }, [])\r\n    .join(delimiter);\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatDuration;\r\n", "import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link formatISO} function options.\r\n */\r\n\r\n/**\r\n * @name formatISO\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string (in local time zone)\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18T19:00:52Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918T190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format, date only:\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\r\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52Z'\r\n */\r\nexport function formatISO(date, options) {\r\n  const date_ = toDate(date, options?.in);\r\n\r\n  if (isNaN(+date_)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const format = options?.format ?? \"extended\";\r\n  const representation = options?.representation ?? \"complete\";\r\n\r\n  let result = \"\";\r\n  let tzOffset = \"\";\r\n\r\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\r\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\r\n\r\n  // Representation is either 'date' or 'complete'\r\n  if (representation !== \"time\") {\r\n    const day = addLeadingZeros(date_.getDate(), 2);\r\n    const month = addLeadingZeros(date_.getMonth() + 1, 2);\r\n    const year = addLeadingZeros(date_.getFullYear(), 4);\r\n\r\n    // yyyyMMdd or yyyy-MM-dd.\r\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\r\n  }\r\n\r\n  // Representation is either 'time' or 'complete'\r\n  if (representation !== \"date\") {\r\n    // Add the timezone.\r\n    const offset = date_.getTimezoneOffset();\r\n\r\n    if (offset !== 0) {\r\n      const absoluteOffset = Math.abs(offset);\r\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\r\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\r\n      // If less than 0, the sign is +, because it is ahead of time.\r\n      const sign = offset < 0 ? \"+\" : \"-\";\r\n\r\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\r\n    } else {\r\n      tzOffset = \"Z\";\r\n    }\r\n\r\n    const hour = addLeadingZeros(date_.getHours(), 2);\r\n    const minute = addLeadingZeros(date_.getMinutes(), 2);\r\n    const second = addLeadingZeros(date_.getSeconds(), 2);\r\n\r\n    // If there's also date, separate it with time with 'T'\r\n    const separator = result === \"\" ? \"\" : \"T\";\r\n\r\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\r\n    const time = [hour, minute, second].join(timeDelimiter);\r\n\r\n    // HHmmss or HH:mm:ss.\r\n    result = `${result}${separator}${time}${tzOffset}`;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatISO;\r\n", "import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\r\nimport { isValid } from \"./isValid.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link formatISO9075} function options.\r\n */\r\n\r\n/**\r\n * @name formatISO9075\r\n * @category Common Helpers\r\n * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).\r\n *\r\n * @description\r\n * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18 19:00:52'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075, short format:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\r\n * //=> '20190918 190052'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, date only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\r\n * //=> '2019-09-18'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in ISO 9075 format, time only:\r\n * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\r\n * //=> '19:00:52'\r\n */\r\nexport function formatISO9075(date, options) {\r\n  const date_ = toDate(date, options?.in);\r\n\r\n  if (!isValid(date_)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const format = options?.format ?? \"extended\";\r\n  const representation = options?.representation ?? \"complete\";\r\n\r\n  let result = \"\";\r\n\r\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\r\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\r\n\r\n  // Representation is either 'date' or 'complete'\r\n  if (representation !== \"time\") {\r\n    const day = addLeadingZeros(date_.getDate(), 2);\r\n    const month = addLeadingZeros(date_.getMonth() + 1, 2);\r\n    const year = addLeadingZeros(date_.getFullYear(), 4);\r\n\r\n    // yyyyMMdd or yyyy-MM-dd.\r\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\r\n  }\r\n\r\n  // Representation is either 'time' or 'complete'\r\n  if (representation !== \"date\") {\r\n    const hour = addLeadingZeros(date_.getHours(), 2);\r\n    const minute = addLeadingZeros(date_.getMinutes(), 2);\r\n    const second = addLeadingZeros(date_.getSeconds(), 2);\r\n\r\n    // If there's also date, separate it with time with a space\r\n    const separator = result === \"\" ? \"\" : \" \";\r\n\r\n    // HHmmss or HH:mm:ss.\r\n    result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatISO9075;\r\n", "/**\r\n * @name formatISODuration\r\n * @category Common Helpers\r\n * @summary Format a duration object according as ISO 8601 duration string\r\n *\r\n * @description\r\n * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs//90001488-13/reference/r_iso_8601_duration_format.htm)\r\n *\r\n * @param duration - The duration to format\r\n *\r\n * @returns The ISO 8601 duration string\r\n *\r\n * @example\r\n * // Format the given duration as ISO 8601 string\r\n * const result = formatISODuration({\r\n *   years: 39,\r\n *   months: 2,\r\n *   days: 20,\r\n *   hours: 7,\r\n *   minutes: 5,\r\n *   seconds: 0\r\n * })\r\n * //=> 'P39Y2M20DT0H0M0S'\r\n */\r\nexport function formatISODuration(duration) {\r\n  const {\r\n    years = 0,\r\n    months = 0,\r\n    days = 0,\r\n    hours = 0,\r\n    minutes = 0,\r\n    seconds = 0,\r\n  } = duration;\r\n\r\n  return `P${years}Y${months}M${days}DT${hours}H${minutes}M${seconds}S`;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatISODuration;\r\n", "import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\r\nimport { isValid } from \"./isValid.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link formatRFC3339} function options.\r\n */\r\n\r\n/**\r\n * @name formatRFC3339\r\n * @category Common Helpers\r\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\r\n *\r\n * @description\r\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options.\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format:\r\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> '2019-09-18T19:00:52Z'\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\r\n * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {\r\n *   fractionDigits: 3\r\n * })\r\n * //=> '2019-09-18T19:00:52.234Z'\r\n */\r\nexport function formatRFC3339(date, options) {\r\n  const date_ = toDate(date, options?.in);\r\n\r\n  if (!isValid(date_)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const fractionDigits = options?.fractionDigits ?? 0;\r\n\r\n  const day = addLeadingZeros(date_.getDate(), 2);\r\n  const month = addLeadingZeros(date_.getMonth() + 1, 2);\r\n  const year = date_.getFullYear();\r\n\r\n  const hour = addLeadingZeros(date_.getHours(), 2);\r\n  const minute = addLeadingZeros(date_.getMinutes(), 2);\r\n  const second = addLeadingZeros(date_.getSeconds(), 2);\r\n\r\n  let fractionalSecond = \"\";\r\n  if (fractionDigits > 0) {\r\n    const milliseconds = date_.getMilliseconds();\r\n    const fractionalSeconds = Math.trunc(\r\n      milliseconds * Math.pow(10, fractionDigits - 3),\r\n    );\r\n    fractionalSecond = \".\" + addLeadingZeros(fractionalSeconds, fractionDigits);\r\n  }\r\n\r\n  let offset = \"\";\r\n  const tzOffset = date_.getTimezoneOffset();\r\n\r\n  if (tzOffset !== 0) {\r\n    const absoluteOffset = Math.abs(tzOffset);\r\n    const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\r\n    const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\r\n    // If less than 0, the sign is +, because it is ahead of time.\r\n    const sign = tzOffset < 0 ? \"+\" : \"-\";\r\n\r\n    offset = `${sign}${hourOffset}:${minuteOffset}`;\r\n  } else {\r\n    offset = \"Z\";\r\n  }\r\n\r\n  return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatRFC3339;\r\n", "import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\r\nimport { isValid } from \"./isValid.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\nconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\nconst months = [\r\n  \"Jan\",\r\n  \"Feb\",\r\n  \"Mar\",\r\n  \"Apr\",\r\n  \"May\",\r\n  \"Jun\",\r\n  \"Jul\",\r\n  \"Aug\",\r\n  \"Sep\",\r\n  \"Oct\",\r\n  \"Nov\",\r\n  \"Dec\",\r\n];\r\n\r\n/**\r\n * @name formatRFC7231\r\n * @category Common Helpers\r\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\r\n *\r\n * @description\r\n * Return the formatted date string in RFC 7231 format.\r\n * The result will always be in UTC timezone.\r\n *\r\n * @param date - The original date\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 18 September 2019 in RFC 7231 format:\r\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\r\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\r\n */\r\nexport function formatRFC7231(date) {\r\n  const _date = toDate(date);\r\n\r\n  if (!isValid(_date)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const dayName = days[_date.getUTCDay()];\r\n  const dayOfMonth = addLeadingZeros(_date.getUTCDate(), 2);\r\n  const monthName = months[_date.getUTCMonth()];\r\n  const year = _date.getUTCFullYear();\r\n\r\n  const hour = addLeadingZeros(_date.getUTCHours(), 2);\r\n  const minute = addLeadingZeros(_date.getUTCMinutes(), 2);\r\n  const second = addLeadingZeros(_date.getUTCSeconds(), 2);\r\n\r\n  // Result variables.\r\n  return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatRFC7231;\r\n", "import { defaultLocale } from \"./_lib/defaultLocale.js\";\r\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\r\nimport { format } from \"./format.js\";\r\n\r\n/**\r\n * The {@link formatRelative} function options.\r\n */\r\n\r\n/**\r\n * @name formatRelative\r\n * @category Common Helpers\r\n * @summary Represent the date in words relative to the given base date.\r\n *\r\n * @description\r\n * Represent the date in words relative to the given base date.\r\n *\r\n * | Distance to the base date | Result                    |\r\n * |---------------------------|---------------------------|\r\n * | Previous 6 days           | last Sunday at 04:30 AM   |\r\n * | Last day                  | yesterday at 04:30 AM     |\r\n * | Same day                  | today at 04:30 AM         |\r\n * | Next day                  | tomorrow at 04:30 AM      |\r\n * | Next 6 days               | Sunday at 04:30 AM        |\r\n * | Other                     | 12/31/2017                |\r\n *\r\n * @param date - The date to format\r\n * @param baseDate - The date to compare with\r\n * @param options - An object with options\r\n *\r\n * @returns The date in words\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `baseDate` must not be Invalid Date\r\n * @throws `options.locale` must contain `localize` property\r\n * @throws `options.locale` must contain `formatLong` property\r\n * @throws `options.locale` must contain `formatRelative` property\r\n *\r\n * @example\r\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\r\n * const result = formatRelative(subDays(new Date(), 6), new Date())\r\n * //=> \"last Thursday at 12:45 AM\"\r\n */\r\nexport function formatRelative(date, baseDate, options) {\r\n  const [date_, baseDate_] = normalizeDates(options?.in, date, baseDate);\r\n\r\n  const defaultOptions = getDefaultOptions();\r\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\r\n  const weekStartsOn =\r\n    options?.weekStartsOn ??\r\n    options?.locale?.options?.weekStartsOn ??\r\n    defaultOptions.weekStartsOn ??\r\n    defaultOptions.locale?.options?.weekStartsOn ??\r\n    0;\r\n\r\n  const diff = differenceInCalendarDays(date_, baseDate_);\r\n\r\n  if (isNaN(diff)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  let token;\r\n  if (diff < -6) {\r\n    token = \"other\";\r\n  } else if (diff < -1) {\r\n    token = \"lastWeek\";\r\n  } else if (diff < 0) {\r\n    token = \"yesterday\";\r\n  } else if (diff < 1) {\r\n    token = \"today\";\r\n  } else if (diff < 2) {\r\n    token = \"tomorrow\";\r\n  } else if (diff < 7) {\r\n    token = \"nextWeek\";\r\n  } else {\r\n    token = \"other\";\r\n  }\r\n\r\n  const formatStr = locale.formatRelative(token, date_, baseDate_, {\r\n    locale,\r\n    weekStartsOn,\r\n  });\r\n  return format(date_, formatStr, { locale, weekStartsOn });\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default formatRelative;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link fromUnixTime} function options.\r\n */\r\n\r\n/**\r\n * @name fromUnixTime\r\n * @category Timestamp Helpers\r\n * @summary Create a date from a Unix timestamp.\r\n *\r\n * @description\r\n * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.\r\n *\r\n * @param unixTime - The given Unix timestamp (in seconds)\r\n * @param options - An object with options. Allows to pass a context.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n *\r\n * @returns The date\r\n *\r\n * @example\r\n * // Create the date 29 February 2012 11:45:05:\r\n * const result = fromUnixTime(1330515905)\r\n * //=> Wed Feb 29 2012 11:45:05\r\n */\r\nexport function fromUnixTime(unixTime, options) {\r\n  return toDate(unixTime * 1000, options?.in);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default fromUnixTime;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link getDay} function options.\r\n */\r\n\r\n/**\r\n * @name getDay\r\n * @category Weekday Helpers\r\n * @summary Get the day of the week of the given date.\r\n *\r\n * @description\r\n * Get the day of the week of the given date.\r\n *\r\n * @param date - The given date\r\n * @param options - The options\r\n *\r\n * @returns The day of week, 0 represents Sunday\r\n *\r\n * @example\r\n * // Which day of the week is 29 February 2012?\r\n * const result = getDay(new Date(2012, 1, 29))\r\n * //=> 3\r\n */\r\nexport function getDay(date, options) {\r\n  return toDate(date, options?.in).getDay();\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getDay;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name isLeapYear\r\n * @category Year Helpers\r\n * @summary Is the given date in the leap year?\r\n *\r\n * @description\r\n * Is the given date in the leap year?\r\n *\r\n * @param date - The date to check\r\n * @param options - The options object\r\n *\r\n * @returns The date is in the leap year\r\n *\r\n * @example\r\n * // Is 1 September 2012 in the leap year?\r\n * const result = isLeapYear(new Date(2012, 8, 1))\r\n * //=> true\r\n */\r\nexport function isLeapYear(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const year = _date.getFullYear();\r\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isLeapYear;\r\n", "import { isLeapYear } from \"./isLeapYear.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link getDaysInYear} function options.\r\n */\r\n\r\n/**\r\n * @name getDaysInYear\r\n * @category Year Helpers\r\n * @summary Get the number of days in a year of the given date.\r\n *\r\n * @description\r\n * Get the number of days in a year of the given date.\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of days in a year\r\n *\r\n * @example\r\n * // How many days are in 2012?\r\n * const result = getDaysInYear(new Date(2012, 0, 1))\r\n * //=> 366\r\n */\r\nexport function getDaysInYear(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  if (Number.isNaN(+_date)) return NaN;\r\n  return isLeapYear(_date) ? 366 : 365;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getDaysInYear;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link getDecade} function options.\r\n */\r\n\r\n/**\r\n * @name getDecade\r\n * @category Decade Helpers\r\n * @summary Get the decade of the given date.\r\n *\r\n * @description\r\n * Get the decade of the given date.\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options\r\n *\r\n * @returns The year of decade\r\n *\r\n * @example\r\n * // Which decade belongs 27 November 1942?\r\n * const result = getDecade(new Date(1942, 10, 27))\r\n * //=> 1940\r\n */\r\nexport function getDecade(date, options) {\r\n  // TODO: Switch to more technical definition in of decades that start with 1\r\n  // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking\r\n  // change, so it can only be done in 4.0.\r\n  const _date = toDate(date, options?.in);\r\n  const year = _date.getFullYear();\r\n  const decade = Math.floor(year / 10) * 10;\r\n  return decade;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getDecade;\r\n", "import { addWeeks } from \"./addWeeks.js\";\r\nimport { millisecondsInWeek } from \"./constants.js\";\r\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\r\n\r\n/**\r\n * The {@link getISOWeeksInYear} function options.\r\n */\r\n\r\n/**\r\n * @name getISOWeeksInYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * @description\r\n * Get the number of weeks in an ISO week-numbering year of the given date.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options\r\n *\r\n * @returns The number of ISO weeks in a year\r\n *\r\n * @example\r\n * // How many weeks are in ISO week-numbering year 2015?\r\n * const result = getISOWeeksInYear(new Date(2015, 1, 11))\r\n * //=> 53\r\n */\r\nexport function getISOWeeksInYear(date, options) {\r\n  const thisYear = startOfISOWeekYear(date, options);\r\n  const nextYear = startOfISOWeekYear(addWeeks(thisYear, 60));\r\n  const diff = +nextYear - +thisYear;\r\n\r\n  // Round the number of weeks to the nearest integer because the number of\r\n  // milliseconds in a week is not constant (e.g. it's different in the week of\r\n  // the daylight saving time clock shift).\r\n  return Math.round(diff / millisecondsInWeek);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getISOWeeksInYear;\r\n", "import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\r\nimport { millisecondsInDay } from \"./constants.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name getOverlappingDaysInIntervals\r\n * @category Interval Helpers\r\n * @summary Get the number of days that overlap in two time intervals\r\n *\r\n * @description\r\n * Get the number of days that overlap in two time intervals. It uses the time\r\n * between dates to calculate the number of days, rounding it up to include\r\n * partial days.\r\n *\r\n * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\r\n * result in 1.\r\n *\r\n * @param intervalLeft - The first interval to compare.\r\n * @param intervalRight - The second interval to compare.\r\n * @param options - An object with options\r\n *\r\n * @returns The number of days that overlap in two time intervals\r\n *\r\n * @example\r\n * // For overlapping time intervals adds 1 for each started overlapping day:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\r\n * )\r\n * //=> 3\r\n *\r\n * @example\r\n * // For non-overlapping time intervals returns 0:\r\n * getOverlappingDaysInIntervals(\r\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\r\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\r\n * )\r\n * //=> 0\r\n */\r\n\r\nexport function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\r\n  const [leftStart, leftEnd] = [\r\n    +toDate(intervalLeft.start),\r\n    +toDate(intervalLeft.end),\r\n  ].sort((a, b) => a - b);\r\n  const [rightStart, rightEnd] = [\r\n    +toDate(intervalRight.start),\r\n    +toDate(intervalRight.end),\r\n  ].sort((a, b) => a - b);\r\n\r\n  // Prevent NaN result if intervals don't overlap at all.\r\n  const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\r\n  if (!isOverlapping) return 0;\r\n\r\n  // Remove the timezone offset to negate the DST effect on calculations.\r\n  const overlapLeft = rightStart < leftStart ? leftStart : rightStart;\r\n  const left = overlapLeft - getTimezoneOffsetInMilliseconds(overlapLeft);\r\n  const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\r\n  const right = overlapRight - getTimezoneOffsetInMilliseconds(overlapRight);\r\n\r\n  // Ceil the number to include partial days too.\r\n  return Math.ceil((right - left) / millisecondsInDay);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getOverlappingDaysInIntervals;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name getTime\r\n * @category Timestamp Helpers\r\n * @summary Get the milliseconds timestamp of the given date.\r\n *\r\n * @description\r\n * Get the milliseconds timestamp of the given date.\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The timestamp\r\n *\r\n * @example\r\n * // Get the timestamp of 29 February 2012 11:45:05.123:\r\n * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\r\n * //=> 1330515905123\r\n */\r\nexport function getTime(date) {\r\n  return +toDate(date);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getTime;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name getUnixTime\r\n * @category Timestamp Helpers\r\n * @summary Get the seconds timestamp of the given date.\r\n *\r\n * @description\r\n * Get the seconds timestamp of the given date.\r\n *\r\n * @param date - The given date\r\n *\r\n * @returns The timestamp\r\n *\r\n * @example\r\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\r\n * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\r\n * //=> 1330512305\r\n */\r\nexport function getUnixTime(date) {\r\n  return Math.trunc(+toDate(date) / 1000);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getUnixTime;\r\n", "import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\nimport { getDate } from \"./getDate.js\";\r\nimport { getDay } from \"./getDay.js\";\r\nimport { startOfMonth } from \"./startOfMonth.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link getWeekOfMonth} function options.\r\n */\r\n\r\n/**\r\n * @name getWeekOfMonth\r\n * @category Week Helpers\r\n * @summary Get the week of the month of the given date.\r\n *\r\n * @description\r\n * Get the week of the month of the given date.\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The week of month\r\n *\r\n * @example\r\n * // Which week of the month is 9 November 2017?\r\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\r\n * //=> 2\r\n */\r\nexport function getWeekOfMonth(date, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const weekStartsOn =\r\n    options?.weekStartsOn ??\r\n    options?.locale?.options?.weekStartsOn ??\r\n    defaultOptions.weekStartsOn ??\r\n    defaultOptions.locale?.options?.weekStartsOn ??\r\n    0;\r\n\r\n  const currentDayOfMonth = getDate(toDate(date, options?.in));\r\n  if (isNaN(currentDayOfMonth)) return NaN;\r\n\r\n  const startWeekDay = getDay(startOfMonth(date, options));\r\n\r\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\r\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\r\n\r\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\r\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getWeekOfMonth;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link lastDayOfMonth} function options.\r\n */\r\n\r\n/**\r\n * @name lastDayOfMonth\r\n * @category Month Helpers\r\n * @summary Return the last day of a month for the given date.\r\n *\r\n * @description\r\n * Return the last day of a month for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The last day of a month\r\n *\r\n * @example\r\n * // The last day of a month for 2 September 2014 11:55:00:\r\n * const result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Tue Sep 30 2014 00:00:00\r\n */\r\nexport function lastDayOfMonth(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const month = _date.getMonth();\r\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\r\n  _date.setHours(0, 0, 0, 0);\r\n  return toDate(_date, options?.in);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lastDayOfMonth;\r\n", "import { differenceInCalendarWeeks } from \"./differenceInCalendarWeeks.js\";\r\nimport { lastDayOfMonth } from \"./lastDayOfMonth.js\";\r\nimport { startOfMonth } from \"./startOfMonth.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link getWeeksInMonth} function options.\r\n */\r\n\r\n/**\r\n * @name getWeeksInMonth\r\n * @category Week Helpers\r\n * @summary Get the number of calendar weeks a month spans.\r\n *\r\n * @description\r\n * Get the number of calendar weeks the month in the given date spans.\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The number of calendar weeks\r\n *\r\n * @example\r\n * // How many calendar weeks does February 2015 span?\r\n * const result = getWeeksInMonth(new Date(2015, 1, 8))\r\n * //=> 4\r\n *\r\n * @example\r\n * // If the week starts on Monday,\r\n * // how many calendar weeks does July 2017 span?\r\n * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })\r\n * //=> 6\r\n */\r\nexport function getWeeksInMonth(date, options) {\r\n  const contextDate = toDate(date, options?.in);\r\n  return (\r\n    differenceInCalendarWeeks(\r\n      lastDayOfMonth(contextDate, options),\r\n      startOfMonth(contextDate, options),\r\n      options,\r\n    ) + 1\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getWeeksInMonth;\r\n", "import { millisecondsInHour } from \"./constants.js\";\r\n\r\n/**\r\n * @name hoursToMilliseconds\r\n * @category  Conversion Helpers\r\n * @summary Convert hours to milliseconds.\r\n *\r\n * @description\r\n * Convert a number of hours to a full number of milliseconds.\r\n *\r\n * @param hours - number of hours to be converted\r\n *\r\n * @returns The number of hours converted to milliseconds\r\n *\r\n * @example\r\n * // Convert 2 hours to milliseconds:\r\n * const result = hoursToMilliseconds(2)\r\n * //=> 7200000\r\n */\r\nexport function hoursToMilliseconds(hours) {\r\n  return Math.trunc(hours * millisecondsInHour);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default hoursToMilliseconds;\r\n", "import { minutesInHour } from \"./constants.js\";\r\n\r\n/**\r\n * @name hoursToMinutes\r\n * @category Conversion Helpers\r\n * @summary Convert hours to minutes.\r\n *\r\n * @description\r\n * Convert a number of hours to a full number of minutes.\r\n *\r\n * @param hours - number of hours to be converted\r\n *\r\n * @returns The number of hours converted in minutes\r\n *\r\n * @example\r\n * // Convert 2 hours to minutes:\r\n * const result = hoursToMinutes(2)\r\n * //=> 120\r\n */\r\nexport function hoursToMinutes(hours) {\r\n  return Math.trunc(hours * minutesInHour);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default hoursToMinutes;\r\n", "import { secondsInHour } from \"./constants.js\";\r\n\r\n/**\r\n * @name hoursToSeconds\r\n * @category Conversion Helpers\r\n * @summary Convert hours to seconds.\r\n *\r\n * @description\r\n * Convert a number of hours to a full number of seconds.\r\n *\r\n * @param hours - The number of hours to be converted\r\n *\r\n * @returns The number of hours converted in seconds\r\n *\r\n * @example\r\n * // Convert 2 hours to seconds:\r\n * const result = hoursToSeconds(2)\r\n * //=> 7200\r\n */\r\nexport function hoursToSeconds(hours) {\r\n  return Math.trunc(hours * secondsInHour);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default hoursToSeconds;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\n\r\n/**\r\n * The {@link interval} function options.\r\n */\r\n\r\n/**\r\n * The {@link interval} function result type. It resolves the proper data type.\r\n * It uses the first argument date object type, starting from the start argument,\r\n * then the end interval date. If a context function is passed, it uses the context\r\n * function return type.\r\n */\r\n\r\n/**\r\n * @name interval\r\n * @category Interval Helpers\r\n * @summary Creates an interval object and validates its values.\r\n *\r\n * @description\r\n * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\r\n *\r\n * @typeParam StartDate - Start date type.\r\n * @typeParam EndDate - End date type.\r\n * @typeParam Options - Options type.\r\n *\r\n * @param start - The start of the interval.\r\n * @param end - The end of the interval.\r\n * @param options - The options object.\r\n *\r\n * @throws `Start date is invalid` when `start` is invalid.\r\n * @throws `End date is invalid` when `end` is invalid.\r\n * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\r\n *\r\n * @returns The normalized and validated interval object.\r\n */\r\nexport function interval(start, end, options) {\r\n  const [_start, _end] = normalizeDates(options?.in, start, end);\r\n\r\n  if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\r\n  if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\r\n\r\n  if (options?.assertPositive && +_start > +_end)\r\n    throw new TypeError(\"End date must be after start date\");\r\n\r\n  return { start: _start, end: _end };\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default interval;\r\n", "import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\r\nimport { add } from \"./add.js\";\r\nimport { differenceInDays } from \"./differenceInDays.js\";\r\nimport { differenceInHours } from \"./differenceInHours.js\";\r\nimport { differenceInMinutes } from \"./differenceInMinutes.js\";\r\nimport { differenceInMonths } from \"./differenceInMonths.js\";\r\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\r\nimport { differenceInYears } from \"./differenceInYears.js\";\r\n\r\n/**\r\n * The {@link intervalToDuration} function options.\r\n */\r\n\r\n/**\r\n * @name intervalToDuration\r\n * @category Common Helpers\r\n * @summary Convert interval to duration\r\n *\r\n * @description\r\n * Convert an interval object to a duration object.\r\n *\r\n * @param interval - The interval to convert to duration\r\n * @param options - The context options\r\n *\r\n * @returns The duration object\r\n *\r\n * @example\r\n * // Get the duration between January 15, 1929 and April 4, 1968.\r\n * intervalToDuration({\r\n *   start: new Date(1929, 0, 15, 12, 0, 0),\r\n *   end: new Date(1968, 3, 4, 19, 5, 0)\r\n * });\r\n * //=> { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\r\n */\r\nexport function intervalToDuration(interval, options) {\r\n  const { start, end } = normalizeInterval(options?.in, interval);\r\n  const duration = {};\r\n\r\n  const years = differenceInYears(end, start);\r\n  if (years) duration.years = years;\r\n\r\n  const remainingMonths = add(start, { years: duration.years });\r\n  const months = differenceInMonths(end, remainingMonths);\r\n  if (months) duration.months = months;\r\n\r\n  const remainingDays = add(remainingMonths, { months: duration.months });\r\n  const days = differenceInDays(end, remainingDays);\r\n  if (days) duration.days = days;\r\n\r\n  const remainingHours = add(remainingDays, { days: duration.days });\r\n  const hours = differenceInHours(end, remainingHours);\r\n  if (hours) duration.hours = hours;\r\n\r\n  const remainingMinutes = add(remainingHours, { hours: duration.hours });\r\n  const minutes = differenceInMinutes(end, remainingMinutes);\r\n  if (minutes) duration.minutes = minutes;\r\n\r\n  const remainingSeconds = add(remainingMinutes, { minutes: duration.minutes });\r\n  const seconds = differenceInSeconds(end, remainingSeconds);\r\n  if (seconds) duration.seconds = seconds;\r\n\r\n  return duration;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default intervalToDuration;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\r\n * @deprecated\r\n *\r\n * [TODO] Remove in v4\r\n */\r\n\r\n/**\r\n * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)\r\n */\r\n\r\n/**\r\n * The locale options.\r\n */\r\n\r\n/**\r\n * @name intlFormat\r\n * @category Common Helpers\r\n * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\r\n *\r\n * @description\r\n * Return the formatted date string in the given format.\r\n * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\r\n * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\r\n *\r\n * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\r\n *\r\n * @param date - The date to format\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in middle-endian format:\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\r\n * //=> 10/4/2019\r\n */\r\n\r\n/**\r\n * @param date - The date to format\r\n * @param localeOptions - An object with locale\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in Korean.\r\n * // Convert the date with locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   locale: 'ko-KR',\r\n * })\r\n * //=> 2019. 10. 4.\r\n */\r\n\r\n/**\r\n * @param date - The date to format\r\n * @param formatOptions - The format options\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019.\r\n * // Convert the date with format's options.\r\n * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   year: 'numeric',\r\n *   month: 'numeric',\r\n *   day: 'numeric',\r\n *   hour: 'numeric',\r\n * })\r\n * //=> 10/4/2019, 12 PM\r\n */\r\n\r\n/**\r\n * @param date - The date to format\r\n * @param formatOptions - The format options\r\n * @param localeOptions - An object with locale\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `date` must not be Invalid Date\r\n *\r\n * @example\r\n * // Represent 4 October 2019 in German.\r\n * // Convert the date with format's options and locale's options.\r\n * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\r\n *   weekday: 'long',\r\n *   year: 'numeric',\r\n *   month: 'long',\r\n *   day: 'numeric',\r\n * }, {\r\n *   locale: 'de-DE',\r\n * })\r\n * //=> Freitag, 4. Oktober 2019\r\n */\r\n\r\nexport function intlFormat(date, formatOrLocale, localeOptions) {\r\n  let formatOptions;\r\n\r\n  if (isFormatOptions(formatOrLocale)) {\r\n    formatOptions = formatOrLocale;\r\n  } else {\r\n    localeOptions = formatOrLocale;\r\n  }\r\n\r\n  return new Intl.DateTimeFormat(localeOptions?.locale, formatOptions).format(\r\n    toDate(date),\r\n  );\r\n}\r\n\r\nfunction isFormatOptions(opts) {\r\n  return opts !== undefined && !(\"locale\" in opts);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default intlFormat;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport {\r\n  secondsInDay,\r\n  secondsInHour,\r\n  secondsInMinute,\r\n  secondsInMonth,\r\n  secondsInQuarter,\r\n  secondsInWeek,\r\n  secondsInYear,\r\n} from \"./constants.js\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\r\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\r\nimport { differenceInCalendarQuarters } from \"./differenceInCalendarQuarters.js\";\r\nimport { differenceInCalendarWeeks } from \"./differenceInCalendarWeeks.js\";\r\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\r\nimport { differenceInHours } from \"./differenceInHours.js\";\r\nimport { differenceInMinutes } from \"./differenceInMinutes.js\";\r\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\r\n\r\n/**\r\n * The {@link intlFormatDistance} function options.\r\n */\r\n\r\n/**\r\n * The unit used to format the distance in {@link intlFormatDistance}.\r\n */\r\n\r\n/**\r\n * @name intlFormatDistance\r\n * @category Common Helpers\r\n * @summary Formats distance between two dates in a human-readable format\r\n * @description\r\n * The function calculates the difference between two dates and formats it as a human-readable string.\r\n *\r\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\r\n *\r\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\r\n *\r\n * See the table below for the unit picking logic:\r\n *\r\n * | Distance between dates | Result (past)  | Result (future) |\r\n * | ---------------------- | -------------- | --------------- |\r\n * | 0 seconds              | now            | now             |\r\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\r\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\r\n * | 1-23 hours             | X hours ago    | in X hours      |\r\n * | 1 day                  | yesterday      | tomorrow        |\r\n * | 2-6 days               | X days ago     | in X days       |\r\n * | 7 days                 | last week      | next week       |\r\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\r\n * | 1 month                | last month     | next month      |\r\n * | 2-3 months             | X months ago   | in X months     |\r\n * | 1 quarter              | last quarter   | next quarter    |\r\n * | 2-3 quarters           | X quarters ago | in X quarters   |\r\n * | 1 year                 | last year      | next year       |\r\n * | 2+ years               | X years ago    | in X years      |\r\n *\r\n * @param laterDate - The date\r\n * @param earlierDate - The date to compare with.\r\n * @param options - An object with options.\r\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\r\n * The narrow one could be similar to the short one for some locales.\r\n *\r\n * @returns The distance in words according to language-sensitive relative time formatting.\r\n *\r\n * @throws `date` must not be Invalid Date\r\n * @throws `baseDate` must not be Invalid Date\r\n * @throws `options.unit` must not be invalid Unit\r\n * @throws `options.locale` must not be invalid locale\r\n * @throws `options.localeMatcher` must not be invalid localeMatcher\r\n * @throws `options.numeric` must not be invalid numeric\r\n * @throws `options.style` must not be invalid style\r\n *\r\n * @example\r\n * // What is the distance between the dates when the fist date is after the second?\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0)\r\n * )\r\n * //=> 'in 1 hour'\r\n *\r\n * // What is the distance between the dates when the fist date is before the second?\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0)\r\n * )\r\n * //=> '1 hour ago'\r\n *\r\n * @example\r\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\r\n * intlFormatDistance(\r\n *   new Date(1987, 6, 4, 10, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   { unit: 'quarter' }\r\n * )\r\n * //=> 'in 5 quarters'\r\n *\r\n * @example\r\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 10, 30, 0),\r\n *   { locale: 'es' }\r\n * )\r\n * //=> 'dentro de 1 hora'\r\n *\r\n * @example\r\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\r\n * intlFormatDistance(\r\n *   new Date(1986, 3, 5, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   { numeric: 'always' }\r\n * )\r\n * //=> 'in 1 day'\r\n *\r\n * @example\r\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\r\n * intlFormatDistance(\r\n *   new Date(1988, 3, 4, 11, 30, 0),\r\n *   new Date(1986, 3, 4, 11, 30, 0),\r\n *   { style: 'short' }\r\n * )\r\n * //=> 'in 2 yr'\r\n */\r\nexport function intlFormatDistance(laterDate, earlierDate, options) {\r\n  let value = 0;\r\n  let unit;\r\n\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n\r\n  if (!options?.unit) {\r\n    // Get the unit based on diffInSeconds calculations if no unit is specified\r\n    const diffInSeconds = differenceInSeconds(laterDate_, earlierDate_); // The smallest unit\r\n\r\n    if (Math.abs(diffInSeconds) < secondsInMinute) {\r\n      value = differenceInSeconds(laterDate_, earlierDate_);\r\n      unit = \"second\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInHour) {\r\n      value = differenceInMinutes(laterDate_, earlierDate_);\r\n      unit = \"minute\";\r\n    } else if (\r\n      Math.abs(diffInSeconds) < secondsInDay &&\r\n      Math.abs(differenceInCalendarDays(laterDate_, earlierDate_)) < 1\r\n    ) {\r\n      value = differenceInHours(laterDate_, earlierDate_);\r\n      unit = \"hour\";\r\n    } else if (\r\n      Math.abs(diffInSeconds) < secondsInWeek &&\r\n      (value = differenceInCalendarDays(laterDate_, earlierDate_)) &&\r\n      Math.abs(value) < 7\r\n    ) {\r\n      unit = \"day\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInMonth) {\r\n      value = differenceInCalendarWeeks(laterDate_, earlierDate_);\r\n      unit = \"week\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInQuarter) {\r\n      value = differenceInCalendarMonths(laterDate_, earlierDate_);\r\n      unit = \"month\";\r\n    } else if (Math.abs(diffInSeconds) < secondsInYear) {\r\n      if (differenceInCalendarQuarters(laterDate_, earlierDate_) < 4) {\r\n        // To filter out cases that are less than a year but match 4 quarters\r\n        value = differenceInCalendarQuarters(laterDate_, earlierDate_);\r\n        unit = \"quarter\";\r\n      } else {\r\n        value = differenceInCalendarYears(laterDate_, earlierDate_);\r\n        unit = \"year\";\r\n      }\r\n    } else {\r\n      value = differenceInCalendarYears(laterDate_, earlierDate_);\r\n      unit = \"year\";\r\n    }\r\n  } else {\r\n    // Get the value if unit is specified\r\n    unit = options?.unit;\r\n    if (unit === \"second\") {\r\n      value = differenceInSeconds(laterDate_, earlierDate_);\r\n    } else if (unit === \"minute\") {\r\n      value = differenceInMinutes(laterDate_, earlierDate_);\r\n    } else if (unit === \"hour\") {\r\n      value = differenceInHours(laterDate_, earlierDate_);\r\n    } else if (unit === \"day\") {\r\n      value = differenceInCalendarDays(laterDate_, earlierDate_);\r\n    } else if (unit === \"week\") {\r\n      value = differenceInCalendarWeeks(laterDate_, earlierDate_);\r\n    } else if (unit === \"month\") {\r\n      value = differenceInCalendarMonths(laterDate_, earlierDate_);\r\n    } else if (unit === \"quarter\") {\r\n      value = differenceInCalendarQuarters(laterDate_, earlierDate_);\r\n    } else if (unit === \"year\") {\r\n      value = differenceInCalendarYears(laterDate_, earlierDate_);\r\n    }\r\n  }\r\n\r\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\r\n    numeric: \"auto\",\r\n    ...options,\r\n  });\r\n\r\n  return rtf.format(value, unit);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default intlFormatDistance;\r\n", "/**\r\n * @name isExists\r\n * @category Common Helpers\r\n * @summary Is the given date exists?\r\n *\r\n * @description\r\n * Checks if the given arguments convert to an existing date.\r\n *\r\n * @param year - The year of the date to check\r\n * @param month - The month of the date to check\r\n * @param day - The day of the date to check\r\n *\r\n * @returns `true` if the date exists\r\n *\r\n * @example\r\n * // For the valid date:\r\n * const result = isExists(2018, 0, 31)\r\n * //=> true\r\n *\r\n * @example\r\n * // For the invalid date:\r\n * const result = isExists(2018, 1, 31)\r\n * //=> false\r\n */\r\nexport function isExists(year, month, day) {\r\n  const date = new Date(year, month, day);\r\n  return (\r\n    date.getFullYear() === year &&\r\n    date.getMonth() === month &&\r\n    date.getDate() === day\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isExists;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isFirstDayOfMonth} function options.\r\n */\r\n\r\n/**\r\n * @name isFirstDayOfMonth\r\n * @category Month Helpers\r\n * @summary Is the given date the first day of a month?\r\n *\r\n * @description\r\n * Is the given date the first day of a month?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is the first day of a month\r\n *\r\n * @example\r\n * // Is 1 September 2014 the first day of a month?\r\n * const result = isFirstDayOfMonth(new Date(2014, 8, 1))\r\n * //=> true\r\n */\r\nexport function isFirstDayOfMonth(date, options) {\r\n  return toDate(date, options?.in).getDate() === 1;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isFirstDayOfMonth;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isFriday} function options.\r\n */\r\n\r\n/**\r\n * @name isFriday\r\n * @category Weekday Helpers\r\n * @summary Is the given date Friday?\r\n *\r\n * @description\r\n * Is the given date Friday?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is Friday\r\n *\r\n * @example\r\n * // Is 26 September 2014 Friday?\r\n * const result = isFriday(new Date(2014, 8, 26))\r\n * //=> true\r\n */\r\nexport function isFriday(date, options) {\r\n  return toDate(date, options?.in).getDay() === 5;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isFriday;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name isFuture\r\n * @category Common Helpers\r\n * @summary Is the given date in the future?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the future?\r\n *\r\n * @param date - The date to check\r\n *\r\n * @returns The date is in the future\r\n *\r\n * @example\r\n * // If today is 6 October 2014, is 31 December 2014 in the future?\r\n * const result = isFuture(new Date(2014, 11, 31))\r\n * //=> true\r\n */\r\nexport function isFuture(date) {\r\n  return +toDate(date) > Date.now();\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isFuture;\r\n", "import { isValid } from \"./isValid.js\";\r\nimport { parse } from \"./parse.js\";\r\n\r\n/**\r\n * The {@link isMatch} function options.\r\n */\r\n\r\n/**\r\n * @name isMatch\r\n * @category Common Helpers\r\n * @summary validates the date string against given formats\r\n *\r\n * @description\r\n * Return the true if given date is string correct against the given format else\r\n * will return false.\r\n *\r\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\r\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\r\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\r\n *\r\n * Format of the format string is based on Unicode Technical Standard #35:\r\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * with a few additions (see note 5 below the table).\r\n *\r\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\r\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\r\n *\r\n * ```javascript\r\n * isMatch('23 AM', 'HH a')\r\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\r\n * ```\r\n *\r\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\r\n *\r\n * Accepted format string patterns:\r\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\r\n * |---------------------------------|-----|---------|-----------------------------------|-------|\r\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\r\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\r\n * |                                 |     | GGGGG   | A, B                              |       |\r\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\r\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\r\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\r\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\r\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\r\n * |                                 |     | yyyyy   | ...                               | 2,4   |\r\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\r\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\r\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\r\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\r\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\r\n * |                                 |     | YYYYY   | ...                               | 2,4   |\r\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\r\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\r\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\r\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\r\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\r\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\r\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\r\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\r\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\r\n * |                                 |     | uuuuu   | ...                               | 2,4   |\r\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\r\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\r\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\r\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\r\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\r\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\r\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\r\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\r\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\r\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\r\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\r\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\r\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\r\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\r\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\r\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\r\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\r\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\r\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\r\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\r\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\r\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\r\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\r\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\r\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\r\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\r\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\r\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\r\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\r\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\r\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\r\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\r\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\r\n * |                                 |     | DDDD    | ...                               | 2     |\r\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\r\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\r\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\r\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\r\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\r\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\r\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\r\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\r\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\r\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\r\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\r\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\r\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\r\n * |                                 |     | aaaaa   | a, p                              |       |\r\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\r\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\r\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\r\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\r\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\r\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\r\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\r\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\r\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\r\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\r\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\r\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\r\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\r\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\r\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\r\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\r\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\r\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\r\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\r\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\r\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\r\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\r\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\r\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\r\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\r\n * |                                 |     | tt      | ...                               | 2     |\r\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\r\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\r\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\r\n * |                                 |     | SSSS    | ...                               | 2     |\r\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\r\n * |                                 |     | TT      | ...                               | 2     |\r\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\r\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\r\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\r\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\r\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\r\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\r\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\r\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\r\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\r\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\r\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\r\n * |                                 |     | PP      | May 29, 1453                      |       |\r\n * |                                 |     | PPP     | May 29th, 1453                    |       |\r\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\r\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\r\n * |                                 |     | pp      | 12:00:00 AM                       |       |\r\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\r\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\r\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\r\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\r\n * Notes:\r\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\r\n *    are the same as \"stand-alone\" units, but are different in some languages.\r\n *    \"Formatting\" units are declined according to the rules of the language\r\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\r\n *    In `format` function, they will produce different result:\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\r\n *\r\n *    `isMatch` will try to match both formatting and stand-alone units interchangeably.\r\n *\r\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\r\n *    the single quote characters (see below).\r\n *    If the sequence is longer than listed in table:\r\n *    - for numerical units (`yyyyyyyy`) `isMatch` will try to match a number\r\n *      as wide as the sequence\r\n *    - for text units (`MMMMMMMM`) `isMatch` will try to match the widest variation of the unit.\r\n *      These variations are marked with \"2\" in the last column of the table.\r\n *\r\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\r\n *    These tokens represent the shortest form of the quarter.\r\n *\r\n * 4. The main difference between `y` and `u` patterns are B.C. years:\r\n *\r\n *    | Year | `y` | `u` |\r\n *    |------|-----|-----|\r\n *    | AC 1 |   1 |   1 |\r\n *    | BC 1 |   1 |   0 |\r\n *    | BC 2 |   2 |  -1 |\r\n *\r\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\r\n *\r\n *    `isMatch('50', 'yy') //=> true`\r\n *\r\n *    `isMatch('75', 'yy') //=> true`\r\n *\r\n *    while `uu` will use the year as is:\r\n *\r\n *    `isMatch('50', 'uu') //=> true`\r\n *\r\n *    `isMatch('75', 'uu') //=> true`\r\n *\r\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\r\n *    except local week-numbering years are dependent on `options.weekStartsOn`\r\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\r\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\r\n *\r\n * 5. These patterns are not in the Unicode Technical Standard #35:\r\n *    - `i`: ISO day of week\r\n *    - `I`: ISO week of year\r\n *    - `R`: ISO week-numbering year\r\n *    - `o`: ordinal number modifier\r\n *    - `P`: long localized date\r\n *    - `p`: long localized time\r\n *\r\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\r\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\r\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\r\n *    on the given locale.\r\n *\r\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\r\n *    using `en-US` locale: `p` => `hh:mm a`\r\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\r\n *    using `pt-BR` locale: `p` => `HH:mm`\r\n *\r\n * Values will be checked in the descending order of its unit's priority.\r\n * Units of an equal priority overwrite each other in the order of appearance.\r\n *\r\n * If no values of higher priority are matched (e.g. when matching string 'January 1st' without a year),\r\n * the values will be taken from today's using `new Date()` date which works as a context of parsing.\r\n *\r\n * The result may vary by locale.\r\n *\r\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\r\n *\r\n * @param dateStr - The date string to verify\r\n * @param format - The string of tokens\r\n * @param options - An object with options.\r\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * @returns Is format string a match for date string?\r\n *\r\n * @throws `options.locale` must contain `match` property\r\n * @throws use `yyyy` instead of `YYYY` for formatting years; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws use `yy` instead of `YY` for formatting years; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws use `d` instead of `D` for formatting days of the month; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws use `dd` instead of `DD` for formatting days of the month; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n * @throws format string contains an unescaped latin alphabet character\r\n *\r\n * @example\r\n * // Match 11 February 2014 from middle-endian format:\r\n * const result = isMatch('02/11/2014', 'MM/dd/yyyy')\r\n * //=> true\r\n *\r\n * @example\r\n * // Match 28th of February in Esperanto locale in the context of 2010 year:\r\n * import eo from 'date-fns/locale/eo'\r\n * const result = isMatch('28-a de februaro', \"do 'de' MMMM\", {\r\n *   locale: eo\r\n * })\r\n * //=> true\r\n */\r\nexport function isMatch(dateStr, formatStr, options) {\r\n  return isValid(parse(dateStr, formatStr, new Date(), options));\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isMatch;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isMonday} function options.\r\n */\r\n\r\n/**\r\n * @name isMonday\r\n * @category Weekday Helpers\r\n * @summary Is the given date Monday?\r\n *\r\n * @description\r\n * Is the given date Monday?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is Monday\r\n *\r\n * @example\r\n * // Is 22 September 2014 Monday?\r\n * const result = isMonday(new Date(2014, 8, 22))\r\n * //=> true\r\n */\r\nexport function isMonday(date, options) {\r\n  return toDate(date, options?.in).getDay() === 1;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isMonday;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * @name isPast\r\n * @category Common Helpers\r\n * @summary Is the given date in the past?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the past?\r\n *\r\n * @param date - The date to check\r\n *\r\n * @returns The date is in the past\r\n *\r\n * @example\r\n * // If today is 6 October 2014, is 2 July 2014 in the past?\r\n * const result = isPast(new Date(2014, 6, 2))\r\n * //=> true\r\n */\r\nexport function isPast(date) {\r\n  return +toDate(date) < Date.now();\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isPast;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { startOfWeek } from \"./startOfWeek.js\";\r\n\r\n/**\r\n * The {@link isSameWeek} function options.\r\n */\r\n\r\n/**\r\n * @name isSameWeek\r\n * @category Week Helpers\r\n * @summary Are the given dates in the same week (and month and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same week (and month and year)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same week (and month and year)\r\n *\r\n * @example\r\n * // Are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))\r\n * //=> true\r\n *\r\n * @example\r\n * // If week starts with Monday,\r\n * // are 31 August 2014 and 4 September 2014 in the same week?\r\n * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {\r\n *   weekStartsOn: 1\r\n * })\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same week?\r\n * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\r\nexport function isSameWeek(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return (\r\n    +startOfWeek(laterDate_, options) === +startOfWeek(earlierDate_, options)\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameWeek;\r\n", "import { isSameWeek } from \"./isSameWeek.js\";\r\n\r\n/**\r\n * The {@link isSameISOWeek} function options.\r\n */\r\n\r\n/**\r\n * @name isSameISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Are the given dates in the same ISO week (and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week (and year)?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same ISO week (and year)\r\n *\r\n * @example\r\n * // Are 1 September 2014 and 7 September 2014 in the same ISO week?\r\n * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 1 September 2014 and 1 September 2015 in the same ISO week?\r\n * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2015, 8, 1))\r\n * //=> false\r\n */\r\nexport function isSameISOWeek(laterDate, earlierDate, options) {\r\n  return isSameWeek(laterDate, earlierDate, { ...options, weekStartsOn: 1 });\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameISOWeek;\r\n", "import { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\r\n\r\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\r\n\r\n/**\r\n * The {@link isSameISOWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name isSameISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Are the given dates in the same ISO week-numbering year?\r\n *\r\n * @description\r\n * Are the given dates in the same ISO week-numbering year?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same ISO week-numbering year\r\n *\r\n * @example\r\n * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?\r\n * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))\r\n * //=> true\r\n */\r\nexport function isSameISOWeekYear(laterDate, earlierDate, options) {\r\n  const [laterDate_, earlierDate_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return +startOfISOWeekYear(laterDate_) === +startOfISOWeekYear(earlierDate_);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameISOWeekYear;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link startOfMinute} function options.\r\n */\r\n\r\n/**\r\n * @name startOfMinute\r\n * @category Minute Helpers\r\n * @summary Return the start of a minute for the given date.\r\n *\r\n * @description\r\n * Return the start of a minute for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The start of a minute\r\n *\r\n * @example\r\n * // The start of a minute for 1 December 2014 22:15:45.400:\r\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\r\n * //=> Mon Dec 01 2014 22:15:00\r\n */\r\nexport function startOfMinute(date, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  date_.setSeconds(0, 0);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfMinute;\r\n", "import { startOfMinute } from \"./startOfMinute.js\";\r\n\r\n/**\r\n * @name isSameMinute\r\n * @category Minute Helpers\r\n * @summary Are the given dates in the same minute (and hour and day)?\r\n *\r\n * @description\r\n * Are the given dates in the same minute (and hour and day)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n *\r\n * @returns The dates are in the same minute (and hour and day)\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15 in the same minute?\r\n * const result = isSameMinute(\r\n *   new Date(2014, 8, 4, 6, 30),\r\n *   new Date(2014, 8, 4, 6, 30, 15)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:00 and 5 September 2014 06:30:00 in the same minute?\r\n * const result = isSameMinute(\r\n *   new Date(2014, 8, 4, 6, 30),\r\n *   new Date(2014, 8, 5, 6, 30)\r\n * )\r\n * //=> false\r\n */\r\nexport function isSameMinute(laterDate, earlierDate) {\r\n  return +startOfMinute(laterDate) === +startOfMinute(earlierDate);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameMinute;\r\n", "import { normalizeDates } from \"./_lib/normalizeDates.js\";\r\nimport { startOfQuarter } from \"./startOfQuarter.js\";\r\n\r\n/**\r\n * The {@link isSameQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name isSameQuarter\r\n * @category Quarter Helpers\r\n * @summary Are the given dates in the same quarter (and year)?\r\n *\r\n * @description\r\n * Are the given dates in the same quarter (and year)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The dates are in the same quarter (and year)\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 8 March 2014 in the same quarter?\r\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 1 January 2014 and 1 January 2015 in the same quarter?\r\n * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))\r\n * //=> false\r\n */\r\nexport function isSameQuarter(laterDate, earlierDate, options) {\r\n  const [dateLeft_, dateRight_] = normalizeDates(\r\n    options?.in,\r\n    laterDate,\r\n    earlierDate,\r\n  );\r\n  return +startOfQuarter(dateLeft_) === +startOfQuarter(dateRight_);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameQuarter;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link startOfSecond} function options.\r\n */\r\n\r\n/**\r\n * @name startOfSecond\r\n * @category Second Helpers\r\n * @summary Return the start of a second for the given date.\r\n *\r\n * @description\r\n * Return the start of a second for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - The options\r\n *\r\n * @returns The start of a second\r\n *\r\n * @example\r\n * // The start of a second for 1 December 2014 22:15:45.400:\r\n * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))\r\n * //=> Mon Dec 01 2014 22:15:45.000\r\n */\r\nexport function startOfSecond(date, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  date_.setMilliseconds(0);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfSecond;\r\n", "import { startOfSecond } from \"./startOfSecond.js\";\r\n\r\n/**\r\n * @name isSameSecond\r\n * @category Second Helpers\r\n * @summary Are the given dates in the same second (and hour and day)?\r\n *\r\n * @description\r\n * Are the given dates in the same second (and hour and day)?\r\n *\r\n * @param laterDate - The first date to check\r\n * @param earlierDate - The second date to check\r\n *\r\n * @returns The dates are in the same second (and hour and day)\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 30, 15),\r\n *   new Date(2014, 8, 4, 6, 30, 15, 500)\r\n * )\r\n * //=> true\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:00:15.000 and 4 September 2014 06:01.15.000 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 0, 15),\r\n *   new Date(2014, 8, 4, 6, 1, 15)\r\n * )\r\n * //=> false\r\n *\r\n * @example\r\n * // Are 4 September 2014 06:00:15.000 and 5 September 2014 06:00.15.000 in the same second?\r\n * const result = isSameSecond(\r\n *   new Date(2014, 8, 4, 6, 0, 15),\r\n *   new Date(2014, 8, 5, 6, 0, 15)\r\n * )\r\n * //=> false\r\n */\r\nexport function isSameSecond(laterDate, earlierDate) {\r\n  return +startOfSecond(laterDate) === +startOfSecond(earlierDate);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isSameSecond;\r\n", "import { constructNow } from \"./constructNow.js\";\r\nimport { isSameHour } from \"./isSameHour.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isThisHour} function options.\r\n */\r\n\r\n/**\r\n * @name isThisHour\r\n * @category Hour Helpers\r\n * @summary Is the given date in the same hour as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same hour as the current date?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is in this hour\r\n *\r\n * @example\r\n * // If now is 25 September 2014 18:30:15.500,\r\n * // is 25 September 2014 18:00:00 in this hour?\r\n * const result = isThisHour(new Date(2014, 8, 25, 18))\r\n * //=> true\r\n */\r\nexport function isThisHour(date, options) {\r\n  return isSameHour(\r\n    toDate(date, options?.in),\r\n    constructNow(options?.in || date),\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisHour;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameISOWeek } from \"./isSameISOWeek.js\";\r\n\r\n/**\r\n * The {@link isThisISOWeek} function options.\r\n */\r\n\r\n/**\r\n * @name isThisISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Is the given date in the same ISO week as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same ISO week as the current date?\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is in this ISO week\r\n *\r\n * @example\r\n * // If today is 25 September 2014, is 22 September 2014 in this ISO week?\r\n * const result = isThisISOWeek(new Date(2014, 8, 22))\r\n * //=> true\r\n */\r\nexport function isThisISOWeek(date, options) {\r\n  return isSameISOWeek(\r\n    constructFrom(options?.in || date, date),\r\n    constructNow(options?.in || date),\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisISOWeek;\r\n", "import { constructNow } from \"./constructNow.js\";\r\nimport { isSameMinute } from \"./isSameMinute.js\";\r\n\r\n/**\r\n * @name isThisMinute\r\n * @category Minute Helpers\r\n * @summary Is the given date in the same minute as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same minute as the current date?\r\n *\r\n * @param date - The date to check\r\n *\r\n * @returns The date is in this minute\r\n *\r\n * @example\r\n * // If now is 25 September 2014 18:30:15.500,\r\n * // is 25 September 2014 18:30:00 in this minute?\r\n * const result = isThisMinute(new Date(2014, 8, 25, 18, 30))\r\n * //=> true\r\n */\r\n\r\nexport function isThisMinute(date) {\r\n  return isSameMinute(date, constructNow(date));\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisMinute;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameMonth } from \"./isSameMonth.js\";\r\n\r\n/**\r\n * The {@link isThisMonth} function options.\r\n */\r\n\r\n/**\r\n * @name isThisMonth\r\n * @category Month Helpers\r\n * @summary Is the given date in the same month as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same month as the current date?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is in this month\r\n *\r\n * @example\r\n * // If today is 25 September 2014, is 15 September 2014 in this month?\r\n * const result = isThisMonth(new Date(2014, 8, 15))\r\n * //=> true\r\n */\r\nexport function isThisMonth(date, options) {\r\n  return isSameMonth(\r\n    constructFrom(options?.in || date, date),\r\n    constructNow(options?.in || date),\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisMonth;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameQuarter } from \"./isSameQuarter.js\";\r\n\r\n/**\r\n * The {@link isThisQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name isThisQuarter\r\n * @category Quarter Helpers\r\n * @summary Is the given date in the same quarter as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same quarter as the current date?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is in this quarter\r\n *\r\n * @example\r\n * // If today is 25 September 2014, is 2 July 2014 in this quarter?\r\n * const result = isThisQuarter(new Date(2014, 6, 2))\r\n * //=> true\r\n */\r\nexport function isThisQuarter(date, options) {\r\n  return isSameQuarter(\r\n    constructFrom(options?.in || date, date),\r\n    constructNow(options?.in || date),\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisQuarter;\r\n", "import { constructNow } from \"./constructNow.js\";\r\nimport { isSameSecond } from \"./isSameSecond.js\";\r\n\r\n/**\r\n * @name isThisSecond\r\n * @category Second Helpers\r\n * @summary Is the given date in the same second as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same second as the current date?\r\n *\r\n * @param date - The date to check\r\n *\r\n * @returns The date is in this second\r\n *\r\n * @example\r\n * // If now is 25 September 2014 18:30:15.500,\r\n * // is 25 September 2014 18:30:15.000 in this second?\r\n * const result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))\r\n * //=> true\r\n */\r\nexport function isThisSecond(date) {\r\n  return isSameSecond(date, constructNow(date));\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisSecond;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameWeek } from \"./isSameWeek.js\";\r\n\r\n/**\r\n * The {@link isThisWeek} function options.\r\n */\r\n\r\n/**\r\n * @name isThisWeek\r\n * @category Week Helpers\r\n * @summary Is the given date in the same week as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same week as the current date?\r\n *\r\n * @param date - The date to check\r\n * @param options - The object with options\r\n *\r\n * @returns The date is in this week\r\n *\r\n * @example\r\n * // If today is 25 September 2014, is 21 September 2014 in this week?\r\n * const result = isThisWeek(new Date(2014, 8, 21))\r\n * //=> true\r\n *\r\n * @example\r\n * // If today is 25 September 2014 and week starts with Monday\r\n * // is 21 September 2014 in this week?\r\n * const result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })\r\n * //=> false\r\n */\r\nexport function isThisWeek(date, options) {\r\n  return isSameWeek(\r\n    constructFrom(options?.in || date, date),\r\n    constructNow(options?.in || date),\r\n    options,\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisWeek;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameYear } from \"./isSameYear.js\";\r\n\r\n/**\r\n * The {@link isThisYear} function options.\r\n */\r\n\r\n/**\r\n * @name isThisYear\r\n * @category Year Helpers\r\n * @summary Is the given date in the same year as the current date?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date in the same year as the current date?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is in this year\r\n *\r\n * @example\r\n * // If today is 25 September 2014, is 2 July 2014 in this year?\r\n * const result = isThisYear(new Date(2014, 6, 2))\r\n * //=> true\r\n */\r\nexport function isThisYear(date, options) {\r\n  return isSameYear(\r\n    constructFrom(options?.in || date, date),\r\n    constructNow(options?.in || date),\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThisYear;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isThursday} function options.\r\n */\r\n\r\n/**\r\n * @name isThursday\r\n * @category Weekday Helpers\r\n * @summary Is the given date Thursday?\r\n *\r\n * @description\r\n * Is the given date Thursday?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is Thursday\r\n *\r\n * @example\r\n * // Is 25 September 2014 Thursday?\r\n * const result = isThursday(new Date(2014, 8, 25))\r\n * //=> true\r\n */\r\nexport function isThursday(date, options) {\r\n  return toDate(date, options?.in).getDay() === 4;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isThursday;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameDay } from \"./isSameDay.js\";\r\n\r\n/**\r\n * The {@link isToday} function options.\r\n */\r\n\r\n/**\r\n * @name isToday\r\n * @category Day Helpers\r\n * @summary Is the given date today?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date today?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is today\r\n *\r\n * @example\r\n * // If today is 6 October 2014, is 6 October 14:00:00 today?\r\n * const result = isToday(new Date(2014, 9, 6, 14, 0))\r\n * //=> true\r\n */\r\nexport function isToday(date, options) {\r\n  return isSameDay(\r\n    constructFrom(options?.in || date, date),\r\n    constructNow(options?.in || date),\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isToday;\r\n", "import { addDays } from \"./addDays.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameDay } from \"./isSameDay.js\";\r\n\r\n/**\r\n * The {@link isTomorrow} function options.\r\n */\r\n\r\n/**\r\n * @name isTomorrow\r\n * @category Day Helpers\r\n * @summary Is the given date tomorrow?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date tomorrow?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is tomorrow\r\n *\r\n * @example\r\n * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?\r\n * const result = isTomorrow(new Date(2014, 9, 7, 14, 0))\r\n * //=> true\r\n */\r\nexport function isTomorrow(date, options) {\r\n  return isSameDay(\r\n    date,\r\n    addDays(constructNow(options?.in || date), 1),\r\n    options,\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isTomorrow;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isTuesday} function options.\r\n */\r\n\r\n/**\r\n * @name isTuesday\r\n * @category Weekday Helpers\r\n * @summary Is the given date Tuesday?\r\n *\r\n * @description\r\n * Is the given date Tuesday?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is Tuesday\r\n *\r\n * @example\r\n * // Is 23 September 2014 Tuesday?\r\n * const result = isTuesday(new Date(2014, 8, 23))\r\n * //=> true\r\n */\r\nexport function isTuesday(date, options) {\r\n  return toDate(date, options?.in).getDay() === 2;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isTuesday;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link isWednesday} function options.\r\n */\r\n\r\n/**\r\n * @name isWednesday\r\n * @category Weekday Helpers\r\n * @summary Is the given date Wednesday?\r\n *\r\n * @description\r\n * Is the given date Wednesday?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is Wednesday\r\n *\r\n * @example\r\n * // Is 24 September 2014 Wednesday?\r\n * const result = isWednesday(new Date(2014, 8, 24))\r\n * //=> true\r\n */\r\nexport function isWednesday(date, options) {\r\n  return toDate(date, options?.in).getDay() === 3;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isWednesday;\r\n", "import { addDays } from \"./addDays.js\";\r\n\r\n/**\r\n * The {@link subDays} function options.\r\n */\r\n\r\n/**\r\n * @name subDays\r\n * @category Day Helpers\r\n * @summary Subtract the specified number of days from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of days to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the days subtracted\r\n *\r\n * @example\r\n * // Subtract 10 days from 1 September 2014:\r\n * const result = subDays(new Date(2014, 8, 1), 10)\r\n * //=> Fri Aug 22 2014 00:00:00\r\n */\r\nexport function subDays(date, amount, options) {\r\n  return addDays(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subDays;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\nimport { isSameDay } from \"./isSameDay.js\";\r\nimport { subDays } from \"./subDays.js\";\r\n\r\n/**\r\n * The {@link isYesterday} function options.\r\n */\r\n\r\n/**\r\n * @name isYesterday\r\n * @category Day Helpers\r\n * @summary Is the given date yesterday?\r\n * @pure false\r\n *\r\n * @description\r\n * Is the given date yesterday?\r\n *\r\n * @param date - The date to check\r\n * @param options - An object with options\r\n *\r\n * @returns The date is yesterday\r\n *\r\n * @example\r\n * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?\r\n * const result = isYesterday(new Date(2014, 9, 5, 14, 0))\r\n * //=> true\r\n */\r\nexport function isYesterday(date, options) {\r\n  return isSameDay(\r\n    constructFrom(options?.in || date, date),\r\n    subDays(constructNow(options?.in || date), 1),\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default isYesterday;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link lastDayOfDecade} function options.\r\n */\r\n\r\n/**\r\n * @name lastDayOfDecade\r\n * @category Decade Helpers\r\n * @summary Return the last day of a decade for the given date.\r\n *\r\n * @description\r\n * Return the last day of a decade for the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type; inferred from arguments or specified by context.\r\n *\r\n * @param date - The original date\r\n * @param options - The options\r\n *\r\n * @returns The last day of a decade\r\n *\r\n * @example\r\n * // The last day of a decade for 21 December 2012 21:12:00:\r\n * const result = lastDayOfDecade(new Date(2012, 11, 21, 21, 12, 00))\r\n * //=> Wed Dec 31 2019 00:00:00\r\n */\r\nexport function lastDayOfDecade(date, options) {\r\n  const _date = toDate(date, options?.in);\r\n  const year = _date.getFullYear();\r\n  const decade = 9 + Math.floor(year / 10) * 10;\r\n  _date.setFullYear(decade + 1, 0, 0);\r\n  _date.setHours(0, 0, 0, 0);\r\n  return toDate(_date, options?.in);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lastDayOfDecade;\r\n", "import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link lastDayOfWeek} function options.\r\n */\r\n\r\n/**\r\n * @name lastDayOfWeek\r\n * @category Week Helpers\r\n * @summary Return the last day of a week for the given date.\r\n *\r\n * @description\r\n * Return the last day of a week for the given date.\r\n * The result will be in the local timezone unless a context is specified.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The last day of a week\r\n */\r\nexport function lastDayOfWeek(date, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const weekStartsOn =\r\n    options?.weekStartsOn ??\r\n    options?.locale?.options?.weekStartsOn ??\r\n    defaultOptions.weekStartsOn ??\r\n    defaultOptions.locale?.options?.weekStartsOn ??\r\n    0;\r\n\r\n  const _date = toDate(date, options?.in);\r\n  const day = _date.getDay();\r\n  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);\r\n\r\n  _date.setHours(0, 0, 0, 0);\r\n  _date.setDate(_date.getDate() + diff);\r\n\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lastDayOfWeek;\r\n", "import { lastDayOfWeek } from \"./lastDayOfWeek.js\";\r\n\r\n/**\r\n * The {@link lastDayOfISOWeek} function options.\r\n */\r\n\r\n/**\r\n * @name lastDayOfISOWeek\r\n * @category ISO Week Helpers\r\n * @summary Return the last day of an ISO week for the given date.\r\n *\r\n * @description\r\n * Return the last day of an ISO week for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The Date type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [UTCDate](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The last day of an ISO week\r\n *\r\n * @example\r\n * // The last day of an ISO week for 2 September 2014 11:55:00:\r\n * const result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Sun Sep 07 2014 00:00:00\r\n */\r\nexport function lastDayOfISOWeek(date, options) {\r\n  return lastDayOfWeek(date, { ...options, weekStartsOn: 1 });\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lastDayOfISOWeek;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\r\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\r\n\r\n/**\r\n * The {@link lastDayOfISOWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name lastDayOfISOWeekYear\r\n * @category ISO Week-Numbering Year Helpers\r\n * @summary Return the last day of an ISO week-numbering year for the given date.\r\n *\r\n * @description\r\n * Return the last day of an ISO week-numbering year,\r\n * which always starts 3 days before the year's first Thursday.\r\n * The result will be in the local timezone.\r\n *\r\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The end of an ISO week-numbering year\r\n *\r\n * @example\r\n * // The last day of an ISO week-numbering year for 2 July 2005:\r\n * const result = lastDayOfISOWeekYear(new Date(2005, 6, 2))\r\n * //=> Sun Jan 01 2006 00:00:00\r\n */\r\nexport function lastDayOfISOWeekYear(date, options) {\r\n  const year = getISOWeekYear(date, options);\r\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\r\n  fourthOfJanuary.setFullYear(year + 1, 0, 4);\r\n  fourthOfJanuary.setHours(0, 0, 0, 0);\r\n\r\n  const date_ = startOfISOWeek(fourthOfJanuary, options);\r\n  date_.setDate(date_.getDate() - 1);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lastDayOfISOWeekYear;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link lastDayOfQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name lastDayOfQuarter\r\n * @category Quarter Helpers\r\n * @summary Return the last day of a year quarter for the given date.\r\n *\r\n * @description\r\n * Return the last day of a year quarter for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - The options\r\n *\r\n * @returns The last day of a quarter\r\n *\r\n * @example\r\n * // The last day of a quarter for 2 September 2014 11:55:00:\r\n * const result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Tue Sep 30 2014 00:00:00\r\n */\r\nexport function lastDayOfQuarter(date, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  const currentMonth = date_.getMonth();\r\n  const month = currentMonth - (currentMonth % 3) + 3;\r\n  date_.setMonth(month, 0);\r\n  date_.setHours(0, 0, 0, 0);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lastDayOfQuarter;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link lastDayOfYear} function options.\r\n */\r\n\r\n/**\r\n * @name lastDayOfYear\r\n * @category Year Helpers\r\n * @summary Return the last day of a year for the given date.\r\n *\r\n * @description\r\n * Return the last day of a year for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The last day of a year\r\n *\r\n * @example\r\n * // The last day of a year for 2 September 2014 11:55:00:\r\n * const result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))\r\n * //=> Wed Dec 31 2014 00:00:00\r\n */\r\nexport function lastDayOfYear(date, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  const year = date_.getFullYear();\r\n  date_.setFullYear(year + 1, 0, 0);\r\n  date_.setHours(0, 0, 0, 0);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lastDayOfYear;\r\n", "import { lightFormatters } from \"./_lib/format/lightFormatters.js\";\r\nimport { isValid } from \"./isValid.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n// Rexports of internal for libraries to use.\r\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\r\nexport { lightFormatters };\r\n\r\n// This RegExp consists of three parts separated by `|`:\r\n// - (\\w)\\1* matches any sequences of the same letter\r\n// - '' matches two quote characters in a row\r\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\r\n//   except a single quote symbol, which ends the sequence.\r\n//   Two quote characters do not end the sequence.\r\n//   If there is no matching single quote\r\n//   then the sequence will continue until the end of the string.\r\n// - . matches any single character unmatched by previous parts of the RegExps\r\nconst formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\r\n\r\nconst escapedStringRegExp = /^'([^]*?)'?$/;\r\nconst doubleQuoteRegExp = /''/g;\r\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\r\n\r\n/**\r\n * @private\r\n */\r\n\r\n/**\r\n * @name lightFormat\r\n * @category Common Helpers\r\n * @summary Format the date.\r\n *\r\n * @description\r\n * Return the formatted date string in the given format. Unlike `format`,\r\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\r\n *\r\n * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\r\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\r\n *\r\n * The characters wrapped between two single quotes characters (') are escaped.\r\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\r\n *\r\n * Format of the string is based on Unicode Technical Standard #35:\r\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n *\r\n * Accepted patterns:\r\n * | Unit                            | Pattern | Result examples                   |\r\n * |---------------------------------|---------|-----------------------------------|\r\n * | AM, PM                          | a..aaa  | AM, PM                            |\r\n * |                                 | aaaa    | a.m., p.m.                        |\r\n * |                                 | aaaaa   | a, p                              |\r\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\r\n * |                                 | yy      | 44, 01, 00, 17                    |\r\n * |                                 | yyy     | 044, 001, 000, 017                |\r\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\r\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\r\n * |                                 | MM      | 01, 02, ..., 12                   |\r\n * | Day of month                    | d       | 1, 2, ..., 31                     |\r\n * |                                 | dd      | 01, 02, ..., 31                   |\r\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\r\n * |                                 | hh      | 01, 02, ..., 11, 12               |\r\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\r\n * |                                 | HH      | 00, 01, 02, ..., 23               |\r\n * | Minute                          | m       | 0, 1, ..., 59                     |\r\n * |                                 | mm      | 00, 01, ..., 59                   |\r\n * | Second                          | s       | 0, 1, ..., 59                     |\r\n * |                                 | ss      | 00, 01, ..., 59                   |\r\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\r\n * |                                 | SS      | 00, 01, ..., 99                   |\r\n * |                                 | SSS     | 000, 001, ..., 999                |\r\n * |                                 | SSSS    | ...                               |\r\n *\r\n * @param date - The original date\r\n * @param format - The string of tokens\r\n *\r\n * @returns The formatted date string\r\n *\r\n * @throws `Invalid time value` if the date is invalid\r\n * @throws format string contains an unescaped latin alphabet character\r\n *\r\n * @example\r\n * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\r\n * //=> '2014-02-11'\r\n */\r\nexport function lightFormat(date, formatStr) {\r\n  const date_ = toDate(date);\r\n\r\n  if (!isValid(date_)) {\r\n    throw new RangeError(\"Invalid time value\");\r\n  }\r\n\r\n  const tokens = formatStr.match(formattingTokensRegExp);\r\n\r\n  // The only case when formattingTokensRegExp doesn't match the string is when it's empty\r\n  if (!tokens) return \"\";\r\n\r\n  const result = tokens\r\n    .map((substring) => {\r\n      // Replace two single quote characters with one single quote character\r\n      if (substring === \"''\") {\r\n        return \"'\";\r\n      }\r\n\r\n      const firstCharacter = substring[0];\r\n      if (firstCharacter === \"'\") {\r\n        return cleanEscapedString(substring);\r\n      }\r\n\r\n      const formatter = lightFormatters[firstCharacter];\r\n      if (formatter) {\r\n        return formatter(date_, substring);\r\n      }\r\n\r\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\r\n        throw new RangeError(\r\n          \"Format string contains an unescaped latin alphabet character `\" +\r\n            firstCharacter +\r\n            \"`\",\r\n        );\r\n      }\r\n\r\n      return substring;\r\n    })\r\n    .join(\"\");\r\n\r\n  return result;\r\n}\r\n\r\nfunction cleanEscapedString(input) {\r\n  const matches = input.match(escapedStringRegExp);\r\n  if (!matches) return input;\r\n  return matches[1].replace(doubleQuoteRegExp, \"'\");\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default lightFormat;\r\n", "import { daysInYear } from \"./constants.js\";\r\n\r\n/**\r\n * @name milliseconds\r\n * @category Millisecond Helpers\r\n * @summary\r\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\r\n *\r\n * @description\r\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\r\n *\r\n * One years equals 365.2425 days according to the formula:\r\n *\r\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\r\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\r\n *\r\n * One month is a year divided by 12.\r\n *\r\n * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be added.\r\n *\r\n * @returns The milliseconds\r\n *\r\n * @example\r\n * // 1 year in milliseconds\r\n * milliseconds({ years: 1 })\r\n * //=> 31556952000\r\n *\r\n * // 3 months in milliseconds\r\n * milliseconds({ months: 3 })\r\n * //=> 7889238000\r\n */\r\nexport function milliseconds({\r\n  years,\r\n  months,\r\n  weeks,\r\n  days,\r\n  hours,\r\n  minutes,\r\n  seconds,\r\n}) {\r\n  let totalDays = 0;\r\n\r\n  if (years) totalDays += years * daysInYear;\r\n  if (months) totalDays += months * (daysInYear / 12);\r\n  if (weeks) totalDays += weeks * 7;\r\n  if (days) totalDays += days;\r\n\r\n  let totalSeconds = totalDays * 24 * 60 * 60;\r\n\r\n  if (hours) totalSeconds += hours * 60 * 60;\r\n  if (minutes) totalSeconds += minutes * 60;\r\n  if (seconds) totalSeconds += seconds;\r\n\r\n  return Math.trunc(totalSeconds * 1000);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default milliseconds;\r\n", "import { millisecondsInHour } from \"./constants.js\";\r\n\r\n/**\r\n * @name millisecondsToHours\r\n * @category Conversion Helpers\r\n * @summary Convert milliseconds to hours.\r\n *\r\n * @description\r\n * Convert a number of milliseconds to a full number of hours.\r\n *\r\n * @param milliseconds - The number of milliseconds to be converted\r\n *\r\n * @returns The number of milliseconds converted in hours\r\n *\r\n * @example\r\n * // Convert 7200000 milliseconds to hours:\r\n * const result = millisecondsToHours(7200000)\r\n * //=> 2\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = millisecondsToHours(7199999)\r\n * //=> 1\r\n */\r\nexport function millisecondsToHours(milliseconds) {\r\n  const hours = milliseconds / millisecondsInHour;\r\n  return Math.trunc(hours);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default millisecondsToHours;\r\n", "import { millisecondsInMinute } from \"./constants.js\";\r\n\r\n/**\r\n * @name millisecondsToMinutes\r\n * @category Conversion Helpers\r\n * @summary Convert milliseconds to minutes.\r\n *\r\n * @description\r\n * Convert a number of milliseconds to a full number of minutes.\r\n *\r\n * @param milliseconds - The number of milliseconds to be converted\r\n *\r\n * @returns The number of milliseconds converted in minutes\r\n *\r\n * @example\r\n * // Convert 60000 milliseconds to minutes:\r\n * const result = millisecondsToMinutes(60000)\r\n * //=> 1\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = millisecondsToMinutes(119999)\r\n * //=> 1\r\n */\r\nexport function millisecondsToMinutes(milliseconds) {\r\n  const minutes = milliseconds / millisecondsInMinute;\r\n  return Math.trunc(minutes);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default millisecondsToMinutes;\r\n", "import { millisecondsInSecond } from \"./constants.js\";\r\n\r\n/**\r\n * @name millisecondsToSeconds\r\n * @category Conversion Helpers\r\n * @summary Convert milliseconds to seconds.\r\n *\r\n * @description\r\n * Convert a number of milliseconds to a full number of seconds.\r\n *\r\n * @param milliseconds - The number of milliseconds to be converted\r\n *\r\n * @returns The number of milliseconds converted in seconds\r\n *\r\n * @example\r\n * // Convert 1000 milliseconds to seconds:\r\n * const result = millisecondsToSeconds(1000)\r\n * //=> 1\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = millisecondsToSeconds(1999)\r\n * //=> 1\r\n */\r\nexport function millisecondsToSeconds(milliseconds) {\r\n  const seconds = milliseconds / millisecondsInSecond;\r\n  return Math.trunc(seconds);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default millisecondsToSeconds;\r\n", "import { minutesInHour } from \"./constants.js\";\r\n\r\n/**\r\n * @name minutesToHours\r\n * @category Conversion Helpers\r\n * @summary Convert minutes to hours.\r\n *\r\n * @description\r\n * Convert a number of minutes to a full number of hours.\r\n *\r\n * @param minutes - The number of minutes to be converted\r\n *\r\n * @returns The number of minutes converted in hours\r\n *\r\n * @example\r\n * // Convert 140 minutes to hours:\r\n * const result = minutesToHours(120)\r\n * //=> 2\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = minutesToHours(179)\r\n * //=> 2\r\n */\r\nexport function minutesToHours(minutes) {\r\n  const hours = minutes / minutesInHour;\r\n  return Math.trunc(hours);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default minutesToHours;\r\n", "import { millisecondsInMinute } from \"./constants.js\";\r\n\r\n/**\r\n * @name minutesToMilliseconds\r\n * @category Conversion Helpers\r\n * @summary Convert minutes to milliseconds.\r\n *\r\n * @description\r\n * Convert a number of minutes to a full number of milliseconds.\r\n *\r\n * @param minutes - The number of minutes to be converted\r\n *\r\n * @returns The number of minutes converted in milliseconds\r\n *\r\n * @example\r\n * // Convert 2 minutes to milliseconds\r\n * const result = minutesToMilliseconds(2)\r\n * //=> 120000\r\n */\r\nexport function minutesToMilliseconds(minutes) {\r\n  return Math.trunc(minutes * millisecondsInMinute);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default minutesToMilliseconds;\r\n", "import { secondsInMinute } from \"./constants.js\";\r\n\r\n/**\r\n * @name minutesToSeconds\r\n * @category Conversion Helpers\r\n * @summary Convert minutes to seconds.\r\n *\r\n * @description\r\n * Convert a number of minutes to a full number of seconds.\r\n *\r\n * @param minutes - The number of minutes to be converted\r\n *\r\n * @returns The number of minutes converted in seconds\r\n *\r\n * @example\r\n * // Convert 2 minutes to seconds\r\n * const result = minutesToSeconds(2)\r\n * //=> 120\r\n */\r\nexport function minutesToSeconds(minutes) {\r\n  return Math.trunc(minutes * secondsInMinute);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default minutesToSeconds;\r\n", "import { monthsInQuarter } from \"./constants.js\";\r\n\r\n/**\r\n * @name monthsToQuarters\r\n * @category Conversion Helpers\r\n * @summary Convert number of months to quarters.\r\n *\r\n * @description\r\n * Convert a number of months to a full number of quarters.\r\n *\r\n * @param months - The number of months to be converted.\r\n *\r\n * @returns The number of months converted in quarters\r\n *\r\n * @example\r\n * // Convert 6 months to quarters:\r\n * const result = monthsToQuarters(6)\r\n * //=> 2\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = monthsToQuarters(7)\r\n * //=> 2\r\n */\r\nexport function monthsToQuarters(months) {\r\n  const quarters = months / monthsInQuarter;\r\n  return Math.trunc(quarters);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default monthsToQuarters;\r\n", "import { monthsInYear } from \"./constants.js\";\r\n\r\n/**\r\n * @name monthsToYears\r\n * @category Conversion Helpers\r\n * @summary Convert number of months to years.\r\n *\r\n * @description\r\n * Convert a number of months to a full number of years.\r\n *\r\n * @param months - The number of months to be converted\r\n *\r\n * @returns The number of months converted in years\r\n *\r\n * @example\r\n * // Convert 36 months to years:\r\n * const result = monthsToYears(36)\r\n * //=> 3\r\n *\r\n * // It uses floor rounding:\r\n * const result = monthsToYears(40)\r\n * //=> 3\r\n */\r\nexport function monthsToYears(months) {\r\n  const years = months / monthsInYear;\r\n  return Math.trunc(years);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default monthsToYears;\r\n", "import { addDays } from \"./addDays.js\";\r\nimport { getDay } from \"./getDay.js\";\r\n\r\n/**\r\n * The {@link nextDay} function options.\r\n */\r\n\r\n/**\r\n * @name nextDay\r\n * @category Weekday Helpers\r\n * @summary When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to check\r\n * @param day - Day of the week\r\n * @param options - An object with options\r\n *\r\n * @returns The date is the next day of the week\r\n *\r\n * @example\r\n * // When is the next Monday after Mar, 20, 2020?\r\n * const result = nextDay(new Date(2020, 2, 20), 1)\r\n * //=> Mon Mar 23 2020 00:00:00\r\n *\r\n * @example\r\n * // When is the next Tuesday after Mar, 21, 2020?\r\n * const result = nextDay(new Date(2020, 2, 21), 2)\r\n * //=> Tue Mar 24 2020 00:00:00\r\n */\r\nexport function nextDay(date, day, options) {\r\n  let delta = day - getDay(date, options);\r\n  if (delta <= 0) delta += 7;\r\n\r\n  return addDays(date, delta, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextDay;\r\n", "import { nextDay } from \"./nextDay.js\";\r\n\r\n/**\r\n * The {@link nextFriday} function options.\r\n */\r\n\r\n/**\r\n * @name nextFriday\r\n * @category Weekday Helpers\r\n * @summary When is the next Friday?\r\n *\r\n * @description\r\n * When is the next Friday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The next Friday\r\n *\r\n * @example\r\n * // When is the next Friday after Mar, 22, 2020?\r\n * const result = nextFriday(new Date(2020, 2, 22))\r\n * //=> Fri Mar 27 2020 00:00:00\r\n */\r\nexport function nextFriday(date, options) {\r\n  return nextDay(date, 5, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextFriday;\r\n", "import { nextDay } from \"./nextDay.js\";\r\n\r\n/**\r\n * The {@link nextMonday} function options.\r\n */\r\n\r\n/**\r\n * @name nextMonday\r\n * @category Weekday Helpers\r\n * @summary When is the next Monday?\r\n *\r\n * @description\r\n * When is the next Monday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, returned from the context function if passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The next Monday\r\n *\r\n * @example\r\n * // When is the next Monday after Mar, 22, 2020?\r\n * const result = nextMonday(new Date(2020, 2, 22))\r\n * //=> Mon Mar 23 2020 00:00:00\r\n */\r\nexport function nextMonday(date, options) {\r\n  return nextDay(date, 1, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextMonday;\r\n", "import { nextDay } from \"./nextDay.js\";\r\n\r\n/**\r\n * The {@link nextSaturday} function options.\r\n */\r\n\r\n/**\r\n * @name nextSaturday\r\n * @category Weekday Helpers\r\n * @summary When is the next Saturday?\r\n *\r\n * @description\r\n * When is the next Saturday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The next Saturday\r\n *\r\n * @example\r\n * // When is the next Saturday after Mar, 22, 2020?\r\n * const result = nextSaturday(new Date(2020, 2, 22))\r\n * //=> Sat Mar 28 2020 00:00:00\r\n */\r\nexport function nextSaturday(date, options) {\r\n  return nextDay(date, 6, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextSaturday;\r\n", "import { nextDay } from \"./nextDay.js\";\r\n\r\n/**\r\n * The {@link nextSunday} function options.\r\n */\r\n\r\n/**\r\n * @name nextSunday\r\n * @category Weekday Helpers\r\n * @summary When is the next Sunday?\r\n *\r\n * @description\r\n * When is the next Sunday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned if a context is provided.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The next Sunday\r\n *\r\n * @example\r\n * // When is the next Sunday after March 22, 2020?\r\n * const result = nextSunday(new Date(2020, 2, 22))\r\n * //=> Sun Mar 29 2020 00:00:00\r\n */\r\nexport function nextSunday(date, options) {\r\n  return nextDay(date, 0, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextSunday;\r\n", "import { nextDay } from \"./nextDay.js\";\r\n\r\n/**\r\n * The {@link nextThursday} function options.\r\n */\r\n\r\n/**\r\n * @name nextThursday\r\n * @category Weekday Helpers\r\n * @summary When is the next Thursday?\r\n *\r\n * @description\r\n * When is the next Thursday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The next Thursday\r\n *\r\n * @example\r\n * // When is the next Thursday after Mar, 22, 2020?\r\n * const result = nextThursday(new Date(2020, 2, 22))\r\n * //=> Thur Mar 26 2020 00:00:00\r\n */\r\nexport function nextThursday(date, options) {\r\n  return nextDay(date, 4, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextThursday;\r\n", "import { nextDay } from \"./nextDay.js\";\r\n\r\n/**\r\n * The {@link nextTuesday} function options.\r\n */\r\n\r\n/**\r\n * @name nextTuesday\r\n * @category Weekday Helpers\r\n * @summary When is the next Tuesday?\r\n *\r\n * @description\r\n * When is the next Tuesday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The next Tuesday\r\n *\r\n * @example\r\n * // When is the next Tuesday after Mar, 22, 2020?\r\n * const result = nextTuesday(new Date(2020, 2, 22))\r\n * //=> Tue Mar 24 2020 00:00:00\r\n */\r\nexport function nextTuesday(date, options) {\r\n  return nextDay(date, 2, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextTuesday;\r\n", "import { nextDay } from \"./nextDay.js\";\r\n\r\n/**\r\n * The {@link nextWednesday} function options.\r\n */\r\n\r\n/**\r\n * @name nextWednesday\r\n * @category Weekday Helpers\r\n * @summary When is the next Wednesday?\r\n *\r\n * @description\r\n * When is the next Wednesday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The next Wednesday\r\n *\r\n * @example\r\n * // When is the next Wednesday after Mar, 22, 2020?\r\n * const result = nextWednesday(new Date(2020, 2, 22))\r\n * //=> Wed Mar 25 2020 00:00:00\r\n */\r\nexport function nextWednesday(date, options) {\r\n  return nextDay(date, 3, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default nextWednesday;\r\n", "import {\r\n  millisecondsInHour,\r\n  millisecondsInMinute,\r\n} from \"./constants.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link parseISO} function options.\r\n */\r\n\r\n/**\r\n * @name parseISO\r\n * @category Common Helpers\r\n * @summary Parse ISO string\r\n *\r\n * @description\r\n * Parse the given string in ISO 8601 format and return an instance of Date.\r\n *\r\n * Function accepts complete ISO 8601 formats as well as partial implementations.\r\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\r\n *\r\n * If the argument isn't a string, the function cannot parse the string or\r\n * the values are invalid, it returns Invalid Date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param argument - The value to convert\r\n * @param options - An object with options\r\n *\r\n * @returns The parsed date in the local time zone\r\n *\r\n * @example\r\n * // Convert string '2014-02-11T11:30:30' to date:\r\n * const result = parseISO('2014-02-11T11:30:30')\r\n * //=> Tue Feb 11 2014 11:30:30\r\n *\r\n * @example\r\n * // Convert string '+02014101' to date,\r\n * // if the additional number of digits in the extended year format is 1:\r\n * const result = parseISO('+02014101', { additionalDigits: 1 })\r\n * //=> Fri Apr 11 2014 00:00:00\r\n */\r\nexport function parseISO(argument, options) {\r\n  const invalidDate = () => constructFrom(options?.in, NaN);\r\n\r\n  const additionalDigits = options?.additionalDigits ?? 2;\r\n  const dateStrings = splitDateString(argument);\r\n\r\n  let date;\r\n  if (dateStrings.date) {\r\n    const parseYearResult = parseYear(dateStrings.date, additionalDigits);\r\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\r\n  }\r\n\r\n  if (!date || isNaN(+date)) return invalidDate();\r\n\r\n  const timestamp = +date;\r\n  let time = 0;\r\n  let offset;\r\n\r\n  if (dateStrings.time) {\r\n    time = parseTime(dateStrings.time);\r\n    if (isNaN(time)) return invalidDate();\r\n  }\r\n\r\n  if (dateStrings.timezone) {\r\n    offset = parseTimezone(dateStrings.timezone);\r\n    if (isNaN(offset)) return invalidDate();\r\n  } else {\r\n    const tmpDate = new Date(timestamp + time);\r\n    const result = toDate(0, options?.in);\r\n    result.setFullYear(\r\n      tmpDate.getUTCFullYear(),\r\n      tmpDate.getUTCMonth(),\r\n      tmpDate.getUTCDate(),\r\n    );\r\n    result.setHours(\r\n      tmpDate.getUTCHours(),\r\n      tmpDate.getUTCMinutes(),\r\n      tmpDate.getUTCSeconds(),\r\n      tmpDate.getUTCMilliseconds(),\r\n    );\r\n    return result;\r\n  }\r\n\r\n  return toDate(timestamp + time + offset, options?.in);\r\n}\r\n\r\nconst patterns = {\r\n  dateTimeDelimiter: /[T ]/,\r\n  timeZoneDelimiter: /[Z ]/i,\r\n  timezone: /([Z+-].*)$/,\r\n};\r\n\r\nconst dateRegex =\r\n  /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\r\nconst timeRegex =\r\n  /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\r\nconst timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\r\n\r\nfunction splitDateString(dateString) {\r\n  const dateStrings = {};\r\n  const array = dateString.split(patterns.dateTimeDelimiter);\r\n  let timeString;\r\n\r\n  // The regex match should only return at maximum two array elements.\r\n  // [date], [time], or [date, time].\r\n  if (array.length > 2) {\r\n    return dateStrings;\r\n  }\r\n\r\n  if (/:/.test(array[0])) {\r\n    timeString = array[0];\r\n  } else {\r\n    dateStrings.date = array[0];\r\n    timeString = array[1];\r\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\r\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\r\n      timeString = dateString.substr(\r\n        dateStrings.date.length,\r\n        dateString.length,\r\n      );\r\n    }\r\n  }\r\n\r\n  if (timeString) {\r\n    const token = patterns.timezone.exec(timeString);\r\n    if (token) {\r\n      dateStrings.time = timeString.replace(token[1], \"\");\r\n      dateStrings.timezone = token[1];\r\n    } else {\r\n      dateStrings.time = timeString;\r\n    }\r\n  }\r\n\r\n  return dateStrings;\r\n}\r\n\r\nfunction parseYear(dateString, additionalDigits) {\r\n  const regex = new RegExp(\r\n    \"^(?:(\\\\d{4}|[+-]\\\\d{\" +\r\n      (4 + additionalDigits) +\r\n      \"})|(\\\\d{2}|[+-]\\\\d{\" +\r\n      (2 + additionalDigits) +\r\n      \"})$)\",\r\n  );\r\n\r\n  const captures = dateString.match(regex);\r\n  // Invalid ISO-formatted year\r\n  if (!captures) return { year: NaN, restDateString: \"\" };\r\n\r\n  const year = captures[1] ? parseInt(captures[1]) : null;\r\n  const century = captures[2] ? parseInt(captures[2]) : null;\r\n\r\n  // either year or century is null, not both\r\n  return {\r\n    year: century === null ? year : century * 100,\r\n    restDateString: dateString.slice((captures[1] || captures[2]).length),\r\n  };\r\n}\r\n\r\nfunction parseDate(dateString, year) {\r\n  // Invalid ISO-formatted year\r\n  if (year === null) return new Date(NaN);\r\n\r\n  const captures = dateString.match(dateRegex);\r\n  // Invalid ISO-formatted string\r\n  if (!captures) return new Date(NaN);\r\n\r\n  const isWeekDate = !!captures[4];\r\n  const dayOfYear = parseDateUnit(captures[1]);\r\n  const month = parseDateUnit(captures[2]) - 1;\r\n  const day = parseDateUnit(captures[3]);\r\n  const week = parseDateUnit(captures[4]);\r\n  const dayOfWeek = parseDateUnit(captures[5]) - 1;\r\n\r\n  if (isWeekDate) {\r\n    if (!validateWeekDate(year, week, dayOfWeek)) {\r\n      return new Date(NaN);\r\n    }\r\n    return dayOfISOWeekYear(year, week, dayOfWeek);\r\n  } else {\r\n    const date = new Date(0);\r\n    if (\r\n      !validateDate(year, month, day) ||\r\n      !validateDayOfYearDate(year, dayOfYear)\r\n    ) {\r\n      return new Date(NaN);\r\n    }\r\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\r\n    return date;\r\n  }\r\n}\r\n\r\nfunction parseDateUnit(value) {\r\n  return value ? parseInt(value) : 1;\r\n}\r\n\r\nfunction parseTime(timeString) {\r\n  const captures = timeString.match(timeRegex);\r\n  if (!captures) return NaN; // Invalid ISO-formatted time\r\n\r\n  const hours = parseTimeUnit(captures[1]);\r\n  const minutes = parseTimeUnit(captures[2]);\r\n  const seconds = parseTimeUnit(captures[3]);\r\n\r\n  if (!validateTime(hours, minutes, seconds)) {\r\n    return NaN;\r\n  }\r\n\r\n  return (\r\n    hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000\r\n  );\r\n}\r\n\r\nfunction parseTimeUnit(value) {\r\n  return (value && parseFloat(value.replace(\",\", \".\"))) || 0;\r\n}\r\n\r\nfunction parseTimezone(timezoneString) {\r\n  if (timezoneString === \"Z\") return 0;\r\n\r\n  const captures = timezoneString.match(timezoneRegex);\r\n  if (!captures) return 0;\r\n\r\n  const sign = captures[1] === \"+\" ? -1 : 1;\r\n  const hours = parseInt(captures[2]);\r\n  const minutes = (captures[3] && parseInt(captures[3])) || 0;\r\n\r\n  if (!validateTimezone(hours, minutes)) {\r\n    return NaN;\r\n  }\r\n\r\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\r\n}\r\n\r\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\r\n  const date = new Date(0);\r\n  date.setUTCFullYear(isoWeekYear, 0, 4);\r\n  const fourthOfJanuaryDay = date.getUTCDay() || 7;\r\n  const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\r\n  date.setUTCDate(date.getUTCDate() + diff);\r\n  return date;\r\n}\r\n\r\n// Validation functions\r\n\r\n// February is null to handle the leap year (using ||)\r\nconst daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\nfunction isLeapYearIndex(year) {\r\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\r\n}\r\n\r\nfunction validateDate(year, month, date) {\r\n  return (\r\n    month >= 0 &&\r\n    month <= 11 &&\r\n    date >= 1 &&\r\n    date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28))\r\n  );\r\n}\r\n\r\nfunction validateDayOfYearDate(year, dayOfYear) {\r\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\r\n}\r\n\r\nfunction validateWeekDate(_year, week, day) {\r\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\r\n}\r\n\r\nfunction validateTime(hours, minutes, seconds) {\r\n  if (hours === 24) {\r\n    return minutes === 0 && seconds === 0;\r\n  }\r\n\r\n  return (\r\n    seconds >= 0 &&\r\n    seconds < 60 &&\r\n    minutes >= 0 &&\r\n    minutes < 60 &&\r\n    hours >= 0 &&\r\n    hours < 25\r\n  );\r\n}\r\n\r\nfunction validateTimezone(_hours, minutes) {\r\n  return minutes >= 0 && minutes <= 59;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default parseISO;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link parseJSON} function options.\r\n */\r\n\r\n/**\r\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\r\n * a date in JSON, to a JavaScript `Date` instance.\r\n *\r\n * This is a minimal implementation for converting dates retrieved from a JSON API to\r\n * a `Date` instance which can be used with other functions in the `date-fns` library.\r\n * The following formats are supported:\r\n *\r\n * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\r\n * - `2000-03-15T05:20:10Z`: Without milliseconds\r\n * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\r\n * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\r\n * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\r\n * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\r\n * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\r\n * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\r\n *\r\n * For convenience and ease of use these other input types are also supported\r\n * via [toDate](https://date-fns.org/docs/toDate):\r\n *\r\n * - A `Date` instance will be cloned\r\n * - A `number` will be treated as a timestamp\r\n *\r\n * Any other input type or invalid date strings will return an `Invalid Date`.\r\n *\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param dateStr - A fully formed ISO8601 date string to convert\r\n * @param options - An object with options\r\n *\r\n * @returns The parsed date in the local time zone\r\n */\r\nexport function parseJSON(dateStr, options) {\r\n  const parts = dateStr.match(\r\n    /(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/,\r\n  );\r\n\r\n  if (!parts) return toDate(NaN, options?.in);\r\n\r\n  return toDate(\r\n    Date.UTC(\r\n      +parts[1],\r\n      +parts[2] - 1,\r\n      +parts[3],\r\n      +parts[4] - (+parts[9] || 0) * (parts[8] == \"-\" ? -1 : 1),\r\n      +parts[5] - (+parts[10] || 0) * (parts[8] == \"-\" ? -1 : 1),\r\n      +parts[6],\r\n      +((parts[7] || \"0\") + \"00\").substring(0, 3),\r\n    ),\r\n    options?.in,\r\n  );\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default parseJSON;\r\n", "import { getDay } from \"./getDay.js\";\r\nimport { subDays } from \"./subDays.js\";\r\n\r\n/**\r\n * The {@link previousDay} function options.\r\n */\r\n\r\n/**\r\n * @name previousDay\r\n * @category Weekday Helpers\r\n * @summary When is the previous day of the week?\r\n *\r\n * @description\r\n * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to check\r\n * @param day - The day of the week\r\n * @param options - An object with options\r\n *\r\n * @returns The date is the previous day of week\r\n *\r\n * @example\r\n * // When is the previous Monday before Mar, 20, 2020?\r\n * const result = previousDay(new Date(2020, 2, 20), 1)\r\n * //=> Mon Mar 16 2020 00:00:00\r\n *\r\n * @example\r\n * // When is the previous Tuesday before Mar, 21, 2020?\r\n * const result = previousDay(new Date(2020, 2, 21), 2)\r\n * //=> Tue Mar 17 2020 00:00:00\r\n */\r\nexport function previousDay(date, day, options) {\r\n  let delta = getDay(date, options) - day;\r\n  if (delta <= 0) delta += 7;\r\n\r\n  return subDays(date, delta, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousDay;\r\n", "import { previousDay } from \"./previousDay.js\";\r\n\r\n/**\r\n * The {@link previousFriday} function options.\r\n */\r\n\r\n/**\r\n * @name previousFriday\r\n * @category Weekday Helpers\r\n * @summary When is the previous Friday?\r\n *\r\n * @description\r\n * When is the previous Friday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [UTCDate](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - The options\r\n *\r\n * @returns The previous Friday\r\n *\r\n * @example\r\n * // When is the previous Friday before Jun, 19, 2021?\r\n * const result = previousFriday(new Date(2021, 5, 19))\r\n * //=> Fri June 18 2021 00:00:00\r\n */\r\nexport function previousFriday(date, options) {\r\n  return previousDay(date, 5, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousFriday;\r\n", "import { previousDay } from \"./previousDay.js\";\r\n\r\n/**\r\n * The {@link previousMonday} function options.\r\n */\r\n\r\n/**\r\n * @name previousMonday\r\n * @category Weekday Helpers\r\n * @summary When is the previous Monday?\r\n *\r\n * @description\r\n * When is the previous Monday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The previous Monday\r\n *\r\n * @example\r\n * // When is the previous Monday before Jun, 18, 2021?\r\n * const result = previousMonday(new Date(2021, 5, 18))\r\n * //=> Mon June 14 2021 00:00:00\r\n */\r\nexport function previousMonday(date, options) {\r\n  return previousDay(date, 1, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousMonday;\r\n", "import { previousDay } from \"./previousDay.js\";\r\n\r\n/**\r\n * The {@link previousSaturday} function options.\r\n */\r\n\r\n/**\r\n * @name previousSaturday\r\n * @category Weekday Helpers\r\n * @summary When is the previous Saturday?\r\n *\r\n * @description\r\n * When is the previous Saturday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - The options\r\n *\r\n * @returns The previous Saturday\r\n *\r\n * @example\r\n * // When is the previous Saturday before Jun, 20, 2021?\r\n * const result = previousSaturday(new Date(2021, 5, 20))\r\n * //=> Sat June 19 2021 00:00:00\r\n */\r\nexport function previousSaturday(date, options) {\r\n  return previousDay(date, 6, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousSaturday;\r\n", "import { previousDay } from \"./previousDay.js\";\r\n\r\n/**\r\n * The {@link previousSunday} function options.\r\n */\r\n\r\n/**\r\n * @name previousSunday\r\n * @category Weekday Helpers\r\n * @summary When is the previous Sunday?\r\n *\r\n * @description\r\n * When is the previous Sunday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - The options\r\n *\r\n * @returns The previous Sunday\r\n *\r\n * @example\r\n * // When is the previous Sunday before Jun, 21, 2021?\r\n * const result = previousSunday(new Date(2021, 5, 21))\r\n * //=> Sun June 20 2021 00:00:00\r\n */\r\nexport function previousSunday(date, options) {\r\n  return previousDay(date, 0, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousSunday;\r\n", "import { previousDay } from \"./previousDay.js\";\r\n\r\n/**\r\n * The {@link previousThursday} function options.\r\n */\r\n\r\n/**\r\n * @name previousThursday\r\n * @category Weekday Helpers\r\n * @summary When is the previous Thursday?\r\n *\r\n * @description\r\n * When is the previous Thursday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The previous Thursday\r\n *\r\n * @example\r\n * // When is the previous Thursday before Jun, 18, 2021?\r\n * const result = previousThursday(new Date(2021, 5, 18))\r\n * //=> Thu June 17 2021 00:00:00\r\n */\r\nexport function previousThursday(date, options) {\r\n  return previousDay(date, 4, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousThursday;\r\n", "import { previousDay } from \"./previousDay.js\";\r\n\r\n/**\r\n * The {@link previousTuesday} function options.\r\n */\r\n\r\n/**\r\n * @name previousTuesday\r\n * @category Weekday Helpers\r\n * @summary When is the previous Tuesday?\r\n *\r\n * @description\r\n * When is the previous Tuesday?\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The previous Tuesday\r\n *\r\n * @example\r\n * // When is the previous Tuesday before Jun, 18, 2021?\r\n * const result = previousTuesday(new Date(2021, 5, 18))\r\n * //=> Tue June 15 2021 00:00:00\r\n */\r\nexport function previousTuesday(date, options) {\r\n  return previousDay(date, 2, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousTuesday;\r\n", "import { previousDay } from \"./previousDay.js\";\r\n\r\n/**\r\n * The {@link previousWednesday} function options.\r\n */\r\n\r\n/**\r\n * @name previousWednesday\r\n * @category Weekday Helpers\r\n * @summary When is the previous Wednesday?\r\n *\r\n * @description\r\n * When is the previous Wednesday?\r\n *\r\n * @typeParam DateType - The Date type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [UTCDate](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to start counting from\r\n * @param options - An object with options\r\n *\r\n * @returns The previous Wednesday\r\n *\r\n * @example\r\n * // When is the previous Wednesday before Jun, 18, 2021?\r\n * const result = previousWednesday(new Date(2021, 5, 18))\r\n * //=> Wed June 16 2021 00:00:00\r\n */\r\nexport function previousWednesday(date, options) {\r\n  return previousDay(date, 3, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default previousWednesday;\r\n", "import { monthsInQuarter } from \"./constants.js\";\r\n\r\n/**\r\n * @name quartersToMonths\r\n * @category Conversion Helpers\r\n * @summary Convert number of quarters to months.\r\n *\r\n * @description\r\n * Convert a number of quarters to a full number of months.\r\n *\r\n * @param quarters - The number of quarters to be converted\r\n *\r\n * @returns The number of quarters converted in months\r\n *\r\n * @example\r\n * // Convert 2 quarters to months\r\n * const result = quartersToMonths(2)\r\n * //=> 6\r\n */\r\nexport function quartersToMonths(quarters) {\r\n  return Math.trunc(quarters * monthsInQuarter);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default quartersToMonths;\r\n", "import { quartersInYear } from \"./constants.js\";\r\n\r\n/**\r\n * @name quartersToYears\r\n * @category Conversion Helpers\r\n * @summary Convert number of quarters to years.\r\n *\r\n * @description\r\n * Convert a number of quarters to a full number of years.\r\n *\r\n * @param quarters - The number of quarters to be converted\r\n *\r\n * @returns The number of quarters converted in years\r\n *\r\n * @example\r\n * // Convert 8 quarters to years\r\n * const result = quartersToYears(8)\r\n * //=> 2\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = quartersToYears(11)\r\n * //=> 2\r\n */\r\nexport function quartersToYears(quarters) {\r\n  const years = quarters / quartersInYear;\r\n  return Math.trunc(years);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default quartersToYears;\r\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link roundToNearestHours} function options.\r\n */\r\n\r\n/**\r\n * @name roundToNearestHours\r\n * @category Hour Helpers\r\n * @summary Rounds the given date to the nearest hour\r\n *\r\n * @description\r\n * Rounds the given date to the nearest hour (or number of hours).\r\n * Rounds up when the given date is exactly between the nearest round hours.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to round\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date rounded to the closest hour\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:34:56 to nearest hour:\r\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\r\n * //=> Thu Jul 10 2014 13:00:00\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:34:56 to nearest half hour:\r\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\r\n * //=> Thu Jul 10 2014 12:00:00\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:34:56 to nearest half hour:\r\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\r\n * //=> Thu Jul 10 2014 16:00:00\r\n *\r\n * @example\r\n * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\r\n * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\r\n * //=> Thu Jul 10 2014 02:00:00\r\n *\r\n * @example\r\n * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\r\n * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\r\n * //=> Thu Jul 10 2014 08:00:00\r\n */\r\nexport function roundToNearestHours(date, options) {\r\n  const nearestTo = options?.nearestTo ?? 1;\r\n\r\n  if (nearestTo < 1 || nearestTo > 12)\r\n    return constructFrom(options?.in || date, NaN);\r\n\r\n  const date_ = toDate(date, options?.in);\r\n  const fractionalMinutes = date_.getMinutes() / 60;\r\n  const fractionalSeconds = date_.getSeconds() / 60 / 60;\r\n  const fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60 / 60;\r\n  const hours =\r\n    date_.getHours() +\r\n    fractionalMinutes +\r\n    fractionalSeconds +\r\n    fractionalMilliseconds;\r\n\r\n  const method = options?.roundingMethod ?? \"round\";\r\n  const roundingMethod = getRoundingMethod(method);\r\n\r\n  const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\r\n\r\n  date_.setHours(roundedHours, 0, 0, 0);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default roundToNearestHours;\r\n", "import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link roundToNearestMinutes} function options.\r\n */\r\n\r\n/**\r\n * @name roundToNearestMinutes\r\n * @category Minute Helpers\r\n * @summary Rounds the given date to the nearest minute\r\n *\r\n * @description\r\n * Rounds the given date to the nearest minute (or number of minutes).\r\n * Rounds up when the given date is exactly between the nearest round minutes.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to round\r\n * @param options - An object with options.\r\n *\r\n * @returns The new date rounded to the closest minute\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\r\n * //=> Thu Jul 10 2014 12:13:00\r\n *\r\n * @example\r\n * // Round 10 July 2014 12:12:34 to nearest quarter hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\r\n * //=> Thu Jul 10 2014 12:15:00\r\n *\r\n * @example\r\n * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\r\n * //=> Thu Jul 10 2014 12:12:00\r\n *\r\n * @example\r\n * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\r\n * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\r\n * //=> Thu Jul 10 2014 12:30:00\r\n */\r\nexport function roundToNearestMinutes(date, options) {\r\n  const nearestTo = options?.nearestTo ?? 1;\r\n\r\n  if (nearestTo < 1 || nearestTo > 30) return constructFrom(date, NaN);\r\n\r\n  const date_ = toDate(date, options?.in);\r\n  const fractionalSeconds = date_.getSeconds() / 60;\r\n  const fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60;\r\n  const minutes =\r\n    date_.getMinutes() + fractionalSeconds + fractionalMilliseconds;\r\n\r\n  const method = options?.roundingMethod ?? \"round\";\r\n  const roundingMethod = getRoundingMethod(method);\r\n\r\n  const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\r\n\r\n  date_.setMinutes(roundedMinutes, 0, 0);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default roundToNearestMinutes;\r\n", "import { secondsInHour } from \"./constants.js\";\r\n\r\n/**\r\n * @name secondsToHours\r\n * @category Conversion Helpers\r\n * @summary Convert seconds to hours.\r\n *\r\n * @description\r\n * Convert a number of seconds to a full number of hours.\r\n *\r\n * @param seconds - The number of seconds to be converted\r\n *\r\n * @returns The number of seconds converted in hours\r\n *\r\n * @example\r\n * // Convert 7200 seconds into hours\r\n * const result = secondsToHours(7200)\r\n * //=> 2\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = secondsToHours(7199)\r\n * //=> 1\r\n */\r\nexport function secondsToHours(seconds) {\r\n  const hours = seconds / secondsInHour;\r\n  return Math.trunc(hours);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default secondsToHours;\r\n", "import { millisecondsInSecond } from \"./constants.js\";\r\n\r\n/**\r\n * @name secondsToMilliseconds\r\n * @category Conversion Helpers\r\n * @summary Convert seconds to milliseconds.\r\n *\r\n * @description\r\n * Convert a number of seconds to a full number of milliseconds.\r\n *\r\n * @param seconds - The number of seconds to be converted\r\n *\r\n * @returns The number of seconds converted in milliseconds\r\n *\r\n * @example\r\n * // Convert 2 seconds into milliseconds\r\n * const result = secondsToMilliseconds(2)\r\n * //=> 2000\r\n */\r\nexport function secondsToMilliseconds(seconds) {\r\n  return seconds * millisecondsInSecond;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default secondsToMilliseconds;\r\n", "import { secondsInMinute } from \"./constants.js\";\r\n\r\n/**\r\n * @name secondsToMinutes\r\n * @category Conversion Helpers\r\n * @summary Convert seconds to minutes.\r\n *\r\n * @description\r\n * Convert a number of seconds to a full number of minutes.\r\n *\r\n * @param seconds - The number of seconds to be converted\r\n *\r\n * @returns The number of seconds converted in minutes\r\n *\r\n * @example\r\n * // Convert 120 seconds into minutes\r\n * const result = secondsToMinutes(120)\r\n * //=> 2\r\n *\r\n * @example\r\n * // It uses floor rounding:\r\n * const result = secondsToMinutes(119)\r\n * //=> 1\r\n */\r\nexport function secondsToMinutes(seconds) {\r\n  const minutes = seconds / secondsInMinute;\r\n  return Math.trunc(minutes);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default secondsToMinutes;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { setMonth } from \"./setMonth.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link set} function options.\r\n */\r\n\r\n/**\r\n * @name set\r\n * @category Common Helpers\r\n * @summary Set date values to a given date.\r\n *\r\n * @description\r\n * Set date values to a given date.\r\n *\r\n * Sets time values to date from object `values`.\r\n * A value is not set if it is undefined or null or doesn't exist in `values`.\r\n *\r\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\r\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\r\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param values - The date values to be set\r\n * @param options - The options\r\n *\r\n * @returns The new date with options set\r\n *\r\n * @example\r\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\r\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\r\n * //=> Tue Oct 20 2015 00:00:00\r\n *\r\n * @example\r\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\r\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\r\n * //=> Mon Sep 01 2014 12:23:45\r\n */\r\nexport function set(date, values, options) {\r\n  let _date = toDate(date, options?.in);\r\n\r\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\r\n  if (isNaN(+_date)) return constructFrom(options?.in || date, NaN);\r\n\r\n  if (values.year != null) _date.setFullYear(values.year);\r\n  if (values.month != null) _date = setMonth(_date, values.month);\r\n  if (values.date != null) _date.setDate(values.date);\r\n  if (values.hours != null) _date.setHours(values.hours);\r\n  if (values.minutes != null) _date.setMinutes(values.minutes);\r\n  if (values.seconds != null) _date.setSeconds(values.seconds);\r\n  if (values.milliseconds != null) _date.setMilliseconds(values.milliseconds);\r\n\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default set;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setDayOfYear} function options.\r\n */\r\n\r\n/**\r\n * @name setDayOfYear\r\n * @category Day Helpers\r\n * @summary Set the day of the year to the given date.\r\n *\r\n * @description\r\n * Set the day of the year to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param dayOfYear - The day of the year of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the day of the year set\r\n *\r\n * @example\r\n * // Set the 2nd day of the year to 2 July 2014:\r\n * const result = setDayOfYear(new Date(2014, 6, 2), 2)\r\n * //=> Thu Jan 02 2014 00:00:00\r\n */\r\nexport function setDayOfYear(date, dayOfYear, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  date_.setMonth(0);\r\n  date_.setDate(dayOfYear);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setDayOfYear;\r\n", "import {\r\n  getDefaultOptions,\r\n  setDefaultOptions as setInternalDefaultOptions,\r\n} from \"./_lib/defaultOptions.js\";\r\n\r\n/**\r\n * @name setDefaultOptions\r\n * @category Common Helpers\r\n * @summary Set default options including locale.\r\n * @pure false\r\n *\r\n * @description\r\n * Sets the defaults for\r\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\r\n * arguments for all functions.\r\n *\r\n * @param options - An object with options\r\n *\r\n * @example\r\n * // Set global locale:\r\n * import { es } from 'date-fns/locale'\r\n * setDefaultOptions({ locale: es })\r\n * const result = format(new Date(2014, 8, 2), 'PPPP')\r\n * //=> 'martes, 2 de septiembre de 2014'\r\n *\r\n * @example\r\n * // Start of the week for 2 September 2014:\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Start of the week for 2 September 2014,\r\n * // when we set that week starts on Monday by default:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Mon Sep 01 2014 00:00:00\r\n *\r\n * @example\r\n * // Manually set options take priority over default options:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * const result = startOfWeek(new Date(2014, 8, 2), { weekStartsOn: 0 })\r\n * //=> Sun Aug 31 2014 00:00:00\r\n *\r\n * @example\r\n * // Remove the option by setting it to `undefined`:\r\n * setDefaultOptions({ weekStartsOn: 1 })\r\n * setDefaultOptions({ weekStartsOn: undefined })\r\n * const result = startOfWeek(new Date(2014, 8, 2))\r\n * //=> Sun Aug 31 2014 00:00:00\r\n */\r\nexport function setDefaultOptions(options) {\r\n  const result = {};\r\n  const defaultOptions = getDefaultOptions();\r\n\r\n  for (const property in defaultOptions) {\r\n    if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) {\r\n      // [TODO] I challenge you to fix the type\r\n      result[property] = defaultOptions[property];\r\n    }\r\n  }\r\n\r\n  for (const property in options) {\r\n    if (Object.prototype.hasOwnProperty.call(options, property)) {\r\n      if (options[property] === undefined) {\r\n        // [TODO] I challenge you to fix the type\r\n        delete result[property];\r\n      } else {\r\n        // [TODO] I challenge you to fix the type\r\n        result[property] = options[property];\r\n      }\r\n    }\r\n  }\r\n\r\n  setInternalDefaultOptions(result);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setDefaultOptions;\r\n", "import { setMonth } from \"./setMonth.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setQuarter} function options.\r\n */\r\n\r\n/**\r\n * @name setQuarter\r\n * @category Quarter Helpers\r\n * @summary Set the year quarter to the given date.\r\n *\r\n * @description\r\n * Set the year quarter to the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param quarter - The quarter of the new date\r\n * @param options - The options\r\n *\r\n * @returns The new date with the quarter set\r\n *\r\n * @example\r\n * // Set the 2nd quarter to 2 July 2014:\r\n * const result = setQuarter(new Date(2014, 6, 2), 2)\r\n * //=> Wed Apr 02 2014 00:00:00\r\n */\r\nexport function setQuarter(date, quarter, options) {\r\n  const date_ = toDate(date, options?.in);\r\n  const oldQuarter = Math.trunc(date_.getMonth() / 3) + 1;\r\n  const diff = quarter - oldQuarter;\r\n  return setMonth(date_, date_.getMonth() + diff * 3);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setQuarter;\r\n", "import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\nimport { constructFrom } from \"./constructFrom.js\";\r\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\r\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link setWeekYear} function options.\r\n */\r\n\r\n/**\r\n * @name setWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Set the local week-numbering year to the given date.\r\n *\r\n * @description\r\n * Set the local week-numbering year to the given date,\r\n * saving the week number and the weekday number.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param weekYear - The local week-numbering year of the new date\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the local week-numbering year set\r\n *\r\n * @example\r\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\r\n * const result = setWeekYear(new Date(2010, 0, 2), 2004)\r\n * //=> Sat Jan 03 2004 00:00:00\r\n *\r\n * @example\r\n * // Set the local week-numbering year 2004 to 2 January 2010,\r\n * // if Monday is the first day of week\r\n * // and 4 January is always in the first week of the year:\r\n * const result = setWeekYear(new Date(2010, 0, 2), 2004, {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Sat Jan 01 2005 00:00:00\r\n */\r\nexport function setWeekYear(date, weekYear, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const firstWeekContainsDate =\r\n    options?.firstWeekContainsDate ??\r\n    options?.locale?.options?.firstWeekContainsDate ??\r\n    defaultOptions.firstWeekContainsDate ??\r\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\r\n    1;\r\n\r\n  const diff = differenceInCalendarDays(\r\n    toDate(date, options?.in),\r\n    startOfWeekYear(date, options),\r\n    options,\r\n  );\r\n\r\n  const firstWeek = constructFrom(options?.in || date, 0);\r\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\r\n  firstWeek.setHours(0, 0, 0, 0);\r\n\r\n  const date_ = startOfWeekYear(firstWeek, options);\r\n  date_.setDate(date_.getDate() + diff);\r\n  return date_;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default setWeekYear;\r\n", "import { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link startOfDecade} options.\r\n */\r\n\r\n/**\r\n * @name startOfDecade\r\n * @category Decade Helpers\r\n * @summary Return the start of a decade for the given date.\r\n *\r\n * @description\r\n * Return the start of a decade for the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The original date\r\n * @param options - An object with options\r\n *\r\n * @returns The start of a decade\r\n *\r\n * @example\r\n * // The start of a decade for 21 October 2015 00:00:00:\r\n * const result = startOfDecade(new Date(2015, 9, 21, 00, 00, 00))\r\n * //=> Jan 01 2010 00:00:00\r\n */\r\nexport function startOfDecade(date, options) {\r\n  // TODO: Switch to more technical definition in of decades that start with 1\r\n  // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking\r\n  // change, so it can only be done in 4.0.\r\n  const _date = toDate(date, options?.in);\r\n  const year = _date.getFullYear();\r\n  const decade = Math.floor(year / 10) * 10;\r\n  _date.setFullYear(decade, 0, 1);\r\n  _date.setHours(0, 0, 0, 0);\r\n  return _date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfDecade;\r\n", "import { startOfDay } from \"./startOfDay.js\";\r\n\r\n/**\r\n * The {@link startOfToday} function options.\r\n */\r\n\r\n/**\r\n * @name startOfToday\r\n * @category Day Helpers\r\n * @summary Return the start of today.\r\n * @pure false\r\n *\r\n * @description\r\n * Return the start of today.\r\n *\r\n * @typeParam ContextDate - The `Date` type of the context function.\r\n *\r\n * @param options - An object with options\r\n *\r\n * @returns The start of today\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = startOfToday()\r\n * //=> Mon Oct 6 2014 00:00:00\r\n */\r\nexport function startOfToday(options) {\r\n  return startOfDay(Date.now(), options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfToday;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { constructNow } from \"./constructNow.js\";\r\n\r\n/**\r\n * The {@link startOfTomorrow} function options.\r\n */\r\n\r\n/**\r\n * @name startOfTomorrow\r\n * @category Day Helpers\r\n * @summary Return the start of tomorrow.\r\n * @pure false\r\n *\r\n * @typeParam ContextDate - The `Date` type of the context function.\r\n *\r\n * @param options - An object with options\r\n *\r\n * @returns The start of tomorrow\r\n *\r\n * @description\r\n * Return the start of tomorrow.\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = startOfTomorrow()\r\n * //=> Tue Oct 7 2014 00:00:00\r\n */\r\nexport function startOfTomorrow(options) {\r\n  const now = constructNow(options?.in);\r\n  const year = now.getFullYear();\r\n  const month = now.getMonth();\r\n  const day = now.getDate();\r\n\r\n  const date = constructFrom(options?.in, 0);\r\n  date.setFullYear(year, month, day + 1);\r\n  date.setHours(0, 0, 0, 0);\r\n  return date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfTomorrow;\r\n", "import { constructNow } from \"./constructNow.js\";\r\n\r\n/**\r\n * The {@link startOfYesterday} function options.\r\n */\r\n\r\n/**\r\n * @name startOfYesterday\r\n * @category Day Helpers\r\n * @summary Return the start of yesterday.\r\n * @pure false\r\n *\r\n * @typeParam ContextDate - The `Date` type of the context function.\r\n *\r\n * @param options - An object with options\r\n *\r\n * @description\r\n * Return the start of yesterday.\r\n *\r\n * @returns The start of yesterday\r\n *\r\n * @example\r\n * // If today is 6 October 2014:\r\n * const result = startOfYesterday()\r\n * //=> Sun Oct 5 2014 00:00:00\r\n */\r\nexport function startOfYesterday(options) {\r\n  const now = constructNow(options?.in);\r\n  const year = now.getFullYear();\r\n  const month = now.getMonth();\r\n  const day = now.getDate();\r\n\r\n  const date = constructNow(options?.in);\r\n  date.setFullYear(year, month, day - 1);\r\n  date.setHours(0, 0, 0, 0);\r\n  return date;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default startOfYesterday;\r\n", "import { addMonths } from \"./addMonths.js\";\r\n\r\n/**\r\n * The subMonths function options.\r\n */\r\n\r\n/**\r\n * @name subMonths\r\n * @category Month Helpers\r\n * @summary Subtract the specified number of months from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of months from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of months to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the months subtracted\r\n *\r\n * @example\r\n * // Subtract 5 months from 1 February 2015:\r\n * const result = subMonths(new Date(2015, 1, 1), 5)\r\n * //=> Mon Sep 01 2014 00:00:00\r\n */\r\nexport function subMonths(date, amount, options) {\r\n  return addMonths(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subMonths;\r\n", "import { constructFrom } from \"./constructFrom.js\";\r\nimport { subDays } from \"./subDays.js\";\r\nimport { subMonths } from \"./subMonths.js\";\r\n\r\n/**\r\n * The {@link sub} function options.\r\n */\r\n\r\n/**\r\n * @name sub\r\n * @category Common Helpers\r\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\r\n *\r\n * @description\r\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be subtracted\r\n * @param options - An object with options\r\n *\r\n * | Key     | Description                        |\r\n * |---------|------------------------------------|\r\n * | years   | Amount of years to be subtracted   |\r\n * | months  | Amount of months to be subtracted  |\r\n * | weeks   | Amount of weeks to be subtracted   |\r\n * | days    | Amount of days to be subtracted    |\r\n * | hours   | Amount of hours to be subtracted   |\r\n * | minutes | Amount of minutes to be subtracted |\r\n * | seconds | Amount of seconds to be subtracted |\r\n *\r\n * All values default to 0\r\n *\r\n * @returns The new date with the seconds subtracted\r\n *\r\n * @example\r\n * // Subtract the following duration from 15 June 2017 15:29:20\r\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\r\n *   years: 2,\r\n *   months: 9,\r\n *   weeks: 1,\r\n *   days: 7,\r\n *   hours: 5,\r\n *   minutes: 9,\r\n *   seconds: 30\r\n * })\r\n * //=> Mon Sep 1 2014 10:19:50\r\n */\r\nexport function sub(date, duration, options) {\r\n  const {\r\n    years = 0,\r\n    months = 0,\r\n    weeks = 0,\r\n    days = 0,\r\n    hours = 0,\r\n    minutes = 0,\r\n    seconds = 0,\r\n  } = duration;\r\n\r\n  const withoutMonths = subMonths(date, months + years * 12, options);\r\n  const withoutDays = subDays(withoutMonths, days + weeks * 7, options);\r\n\r\n  const minutesToSub = minutes + hours * 60;\r\n  const secondsToSub = seconds + minutesToSub * 60;\r\n  const msToSub = secondsToSub * 1000;\r\n\r\n  return constructFrom(options?.in || date, +withoutDays - msToSub);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default sub;\r\n", "import { addBusinessDays } from \"./addBusinessDays.js\";\r\n\r\n/**\r\n * The {@link subBusinessDays} function options.\r\n */\r\n\r\n/**\r\n * @name subBusinessDays\r\n * @category Day Helpers\r\n * @summary Subtract the specified number of business days (mon - fri) from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of business days (mon - fri) from the given date, ignoring weekends.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of business days to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the business days subtracted\r\n *\r\n * @example\r\n * // Subtract 10 business days from 1 September 2014:\r\n * const result = subBusinessDays(new Date(2014, 8, 1), 10)\r\n * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)\r\n */\r\nexport function subBusinessDays(date, amount, options) {\r\n  return addBusinessDays(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subBusinessDays;\r\n", "import { addHours } from \"./addHours.js\";\r\n\r\n/**\r\n * The {@link subHours} function options.\r\n */\r\n\r\n/**\r\n * @name subHours\r\n * @category Hour Helpers\r\n * @summary Subtract the specified number of hours from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of hours from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of hours to be subtracted.\r\n * @param options - The options\r\n *\r\n * @returns The new date with the hours subtracted\r\n *\r\n * @example\r\n * // Subtract 2 hours from 11 July 2014 01:00:00:\r\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\r\n * //=> Thu Jul 10 2014 23:00:00\r\n */\r\nexport function subHours(date, amount, options) {\r\n  return addHours(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subHours;\r\n", "import { addMilliseconds } from \"./addMilliseconds.js\";\r\n\r\n/**\r\n * The {@link subMilliseconds} function options.\r\n */\r\n\r\n/**\r\n * Subtract the specified number of milliseconds from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of milliseconds to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the milliseconds subtracted\r\n */\r\nexport function subMilliseconds(date, amount, options) {\r\n  return addMilliseconds(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subMilliseconds;\r\n", "import { addMinutes } from \"./addMinutes.js\";\r\n\r\n/**\r\n * The {@link subMinutes} function options.\r\n */\r\n\r\n/**\r\n * @name subMinutes\r\n * @category Minute Helpers\r\n * @summary Subtract the specified number of minutes from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of minutes from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of minutes to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the minutes subtracted\r\n *\r\n * @example\r\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\r\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\r\n * //=> Thu Jul 10 2014 11:30:00\r\n */\r\nexport function subMinutes(date, amount, options) {\r\n  return addMinutes(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subMinutes;\r\n", "import { addQuarters } from \"./addQuarters.js\";\r\n\r\n/**\r\n * The {@link subQuarters} function options.\r\n */\r\n\r\n/**\r\n * @name subQuarters\r\n * @category Quarter Helpers\r\n * @summary Subtract the specified number of year quarters from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of year quarters from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of quarters to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the quarters subtracted\r\n *\r\n * @example\r\n * // Subtract 3 quarters from 1 September 2014:\r\n * const result = subQuarters(new Date(2014, 8, 1), 3)\r\n * //=> Sun Dec 01 2013 00:00:00\r\n */\r\nexport function subQuarters(date, amount, options) {\r\n  return addQuarters(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subQuarters;\r\n", "import { addSeconds } from \"./addSeconds.js\";\r\n\r\n/**\r\n * The {@link subSeconds} function options.\r\n */\r\n\r\n/**\r\n * Subtract the specified number of seconds from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of seconds to be subtracted.\r\n * @param options - The options\r\n *\r\n * @returns The new date with the seconds subtracted\r\n *\r\n * @example\r\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\r\n * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\r\n * //=> Thu Jul 10 2014 12:44:30\r\n */\r\nexport function subSeconds(date, amount, options) {\r\n  return addSeconds(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subSeconds;\r\n", "import { addWeeks } from \"./addWeeks.js\";\r\n\r\n/**\r\n * The {@link subWeeks} function options.\r\n */\r\n\r\n/**\r\n * @name subWeeks\r\n * @category Week Helpers\r\n * @summary Subtract the specified number of weeks from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of weeks from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of weeks to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the weeks subtracted\r\n *\r\n * @example\r\n * // Subtract 4 weeks from 1 September 2014:\r\n * const result = subWeeks(new Date(2014, 8, 1), 4)\r\n * //=> Mon Aug 04 2014 00:00:00\r\n */\r\nexport function subWeeks(date, amount, options) {\r\n  return addWeeks(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subWeeks;\r\n", "import { addYears } from \"./addYears.js\";\r\n\r\n/**\r\n * The {@link subYears} function options.\r\n */\r\n\r\n/**\r\n * @name subYears\r\n * @category Year Helpers\r\n * @summary Subtract the specified number of years from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of years from the given date.\r\n *\r\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\r\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\r\n *\r\n * @param date - The date to be changed\r\n * @param amount - The amount of years to be subtracted.\r\n * @param options - An object with options\r\n *\r\n * @returns The new date with the years subtracted\r\n *\r\n * @example\r\n * // Subtract 5 years from 1 September 2014:\r\n * const result = subYears(new Date(2014, 8, 1), 5)\r\n * //=> Tue Sep 01 2009 00:00:00\r\n */\r\nexport function subYears(date, amount, options) {\r\n  return addYears(date, -amount, options);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default subYears;\r\n", "import { daysInWeek } from \"./constants.js\";\r\n\r\n/**\r\n * @name weeksToDays\r\n * @category Conversion Helpers\r\n * @summary Convert weeks to days.\r\n *\r\n * @description\r\n * Convert a number of weeks to a full number of days.\r\n *\r\n * @param weeks - The number of weeks to be converted\r\n *\r\n * @returns The number of weeks converted in days\r\n *\r\n * @example\r\n * // Convert 2 weeks into days\r\n * const result = weeksToDays(2)\r\n * //=> 14\r\n */\r\nexport function weeksToDays(weeks) {\r\n  return Math.trunc(weeks * daysInWeek);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default weeksToDays;\r\n", "import { daysInYear } from \"./constants.js\";\r\n\r\n/**\r\n * @name yearsToDays\r\n * @category Conversion Helpers\r\n * @summary Convert years to days.\r\n *\r\n * @description\r\n * Convert a number of years to a full number of days.\r\n *\r\n * @param years - The number of years to be converted\r\n *\r\n * @returns The number of years converted in days\r\n *\r\n * @example\r\n * // Convert 2 years into days\r\n * const result = yearsToDays(2)\r\n * //=> 730\r\n */\r\nexport function yearsToDays(years) {\r\n  return Math.trunc(years * daysInYear);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default yearsToDays;\r\n", "import { monthsInYear } from \"./constants.js\";\r\n\r\n/**\r\n * @name yearsToMonths\r\n * @category Conversion Helpers\r\n * @summary Convert years to months.\r\n *\r\n * @description\r\n * Convert a number of years to a full number of months.\r\n *\r\n * @param years - The number of years to be converted\r\n *\r\n * @returns The number of years converted in months\r\n *\r\n * @example\r\n * // Convert 2 years into months\r\n * const result = yearsToMonths(2)\r\n * //=> 24\r\n */\r\nexport function yearsToMonths(years) {\r\n  return Math.trunc(years * monthsInYear);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default yearsToMonths;\r\n", "import { quartersInYear } from \"./constants.js\";\r\n\r\n/**\r\n * @name yearsToQuarters\r\n * @category Conversion Helpers\r\n * @summary Convert years to quarters.\r\n *\r\n * @description\r\n * Convert a number of years to a full number of quarters.\r\n *\r\n * @param years - The number of years to be converted\r\n *\r\n * @returns The number of years converted in quarters\r\n *\r\n * @example\r\n * // Convert 2 years to quarters\r\n * const result = yearsToQuarters(2)\r\n * //=> 8\r\n */\r\nexport function yearsToQuarters(years) {\r\n  return Math.trunc(years * quartersInYear);\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default yearsToQuarters;\r\n"],
  "mappings": "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",
  "names": ["months", "days", "interval", "days", "interval", "interval", "interval", "interval", "interval", "interval", "interval", "interval", "interval", "months", "days", "milliseconds", "days", "months", "format", "format", "format", "months", "days", "milliseconds", "interval", "months", "days", "months", "days", "milliseconds", "milliseconds", "milliseconds", "months", "months", "setDefaultOptions", "months", "days"]
}
